/* Generated By:JavaCC: Do not edit this line. SqlParserTokenManager.java */
package com.ucd.oursql.sql.parsing;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;
import com.ucd.oursql.sql.execution.ExecuteStatement;
import com.ucd.oursql.sql.execution.database.DatabaseStatements;
import com.ucd.oursql.sql.execution.table.TableStatements;

/** Token Manager. */
public class SqlParserTokenManager implements SqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(7, 0);
      case 10:
         jjmatchedKind = 4;
         return jjMoveNfa_0(7, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(7, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(7, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800L, 0x8L);
      case 35:
         jjmatchedKind = 338;
         return jjMoveNfa_0(7, 0);
      case 37:
         jjmatchedKind = 332;
         return jjMoveNfa_0(7, 0);
      case 38:
         jjmatchedKind = 333;
         return jjMoveNfa_0(7, 0);
      case 40:
         jjmatchedKind = 324;
         return jjMoveNfa_0(7, 0);
      case 41:
         jjmatchedKind = 325;
         return jjMoveNfa_0(7, 0);
      case 42:
         jjmatchedKind = 337;
         return jjMoveNfa_0(7, 0);
      case 43:
         jjmatchedKind = 339;
         return jjMoveNfa_0(7, 0);
      case 44:
         jjmatchedKind = 340;
         return jjMoveNfa_0(7, 0);
      case 45:
         jjmatchedKind = 341;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x200000000L, 0x0L);
      case 46:
         jjmatchedKind = 342;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400000000L, 0x0L);
      case 47:
         jjmatchedKind = 343;
         return jjMoveStringLiteralDfa1_0(0x180L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 344;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L, 0x0L);
      case 59:
         jjmatchedKind = 386;
         return jjMoveNfa_0(7, 0);
      case 60:
         jjmatchedKind = 330;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000100L, 0x0L);
      case 61:
         jjmatchedKind = 326;
         return jjMoveNfa_0(7, 0);
      case 62:
         jjmatchedKind = 329;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80L, 0x0L);
      case 63:
         jjmatchedKind = 347;
         return jjMoveNfa_0(7, 0);
      case 91:
         jjmatchedKind = 350;
         return jjMoveNfa_0(7, 0);
      case 93:
         jjmatchedKind = 351;
         return jjMoveNfa_0(7, 0);
      case 95:
         jjmatchedKind = 348;
         return jjMoveNfa_0(7, 0);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1fff000L, 0x0L, 0x0L, 0x3e000000000L, 0x4000000000000000L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7e000000L, 0x0L, 0x0L, 0x40000000000L, 0x0L, 0x40800000000L, 0x0L);
      case 67:
      case 99:
         jjmatchedKind = 235;
         return jjMoveStringLiteralDfa1_0(0x1fffffff80000000L, 0x0L, 0x0L, 0xff00080000000L, 0x0L, 0x7000000000L, 0x0L);
      case 68:
      case 100:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x1fffL, 0x0L, 0x3f0000b00000000L, 0x0L, 0x8000000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fe000L, 0x0L, 0x400000000000000L, 0x0L, 0x20000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffc00000L, 0x0L, 0x800000400000000L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f00000000L, 0x0L, 0x1000000000000000L, 0x0L, 0x10000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fff0000000000L, 0x0L, 0xe000000000000000L, 0x8000000000000007L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e00000000000000L, 0x0L, 0x0L, 0x7f8L, 0x180000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000000000000000L, 0x7L, 0x0L, 0x1ff800L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xff8L, 0x20000000L, 0xe00000L, 0x200000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ff000L, 0x0L, 0x3000000L, 0x400000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fc00000L, 0x0L, 0x1c000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x73f80000000L, 0x0L, 0x7e0000000L, 0x3800000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fff88000000000L, 0x40000000L, 0x7fff800000000L, 0x4000000000000L, 0x0L);
      case 84:
      case 116:
         jjmatchedKind = 187;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf000000000000000L, 0x10000000ffL, 0x3f8000000000000L, 0x0L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L, 0x7f00L, 0xc00000000000000L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1f8000L, 0x0L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x17e00000L, 0x1000000000000000L, 0x0L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xf8000000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x8000000L, 0x0L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 335;
         return jjMoveNfa_0(7, 0);
      case 124:
         jjmatchedKind = 349;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000L, 0x0L);
      case 125:
         jjmatchedKind = 336;
         return jjMoveNfa_0(7, 0);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 0);
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         break;
      case 33:
         if ((active6 & 0x8L) != 0L)
         {
            jjmatchedKind = 387;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L, active6, 0L);
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x400000000L, active6, 0L);
      case 47:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 1;
         }
         break;
      case 58:
         if ((active5 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active5 & 0x80L) != 0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x100L) != 0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x800L) != 0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active5 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 1;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x780000000L, active1, 0xc200004000400000L, active2, 0x1000000000c00018L, active3, 0x70101b000f8000L, active4, 0x804001818L, active5, 0x9000000000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000000000L, active4, 0x1000000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x180000000020L, active3, 0x8000000000L, active4, 0x1000200000L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0x10000000000L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000006000000L, active1, 0xd000001008000ffL, active2, 0x2001e03f80000040L, active3, 0x1180000018000000L, active4, 0x61e0002060L, active5, 0x10000000000L, active6, 0L);
      case 70:
      case 102:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000000000L, active4, 0x2000000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x7800000000L, active1, 0L, active2, 0x8000000000L, active3, 0x600000L, active4, 0x1008000000000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0x1000000001000700L, active2, 0xc000010000000003L, active3, 0x1900000L, active4, 0xf0000000004080L, active5, 0x40000000000L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000e000L, active1, 0x202002000L, active2, 0L, active3, 0x250400000000L, active4, 0x8000000L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L, active2, 0x2000000000000L, active3, 0L, active4, 0L, active5, 0xf8000000000000L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L, active1, 0x1ff80000004000L, active2, 0x4000L, active3, 0xc400000000000700L, active4, 0x8400000000000007L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1fff0020000000L, active1, 0x208000881c000800L, active2, 0x4060000000104L, active3, 0x807c00022000000L, active4, 0x6000f8700L, active5, 0x1a80800000000L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000018000L, active3, 0x1800L, active4, 0L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xf0000000000000L, active3, 0L, active4, 0xff8000000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000040000L, active1, 0x3020001000L, active2, 0x3f040000L, active3, 0x400007eL, active4, 0x100000010000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L, active1, 0x40000000008000L, active2, 0x4000000000L, active3, 0x6000L, active4, 0x800000000000000L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x3000000000000L, active5, 0x2100000000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f80000000800000L, active1, 0xc0000000L, active2, 0x300000040180e00L, active3, 0x80000000L, active4, 0x4000000000d00000L, active5, 0x4006000000000L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L, active5, 0x400000000000L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3f0000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000000000L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0x208000040000000L, active4, 0x204000000000000L, active5, 0L, active6, 0L);
      case 124:
         if ((active5 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjMoveNfa_0(7, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 1);
   }
   switch(curChar)
   {
      case 46:
         if ((active5 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 2;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000013800000000L, active1, 0x400001000000100L, active2, 0xa000180000000L, active3, 0x800001eL, active4, 0x803001000000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1100000040000000L, active3, 0x401000000000L, active4, 0L, active5, 0x4000000000000L);
      case 67:
      case 99:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x38003L, active2, 0x200000000000L, active3, 0x4008000000000000L, active4, 0x400002000000300L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000004000L, active2, 0x40004L, active3, 0x800L, active4, 0x8000000000030000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20004000000000L, active1, 0x100000c0000L, active2, 0x3208000L, active3, 0x2000000010702000L, active4, 0x1008000010000000L, active5, 0x400000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000001cL, active2, 0x200000000L, active3, 0x480000000000000L, active4, 0x2000000L, active5, 0L);
      case 71:
      case 103:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L, active2, 0x10000000000L, active3, 0L, active4, 0x400L, active5, 0x40000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000000020L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         if ((active4 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80100000100000L, active2, 0x1c000000L, active3, 0x8000000004004320L, active4, 0L, active5, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 371;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xe0000004000L, active1, 0x40400020L, active2, 0xe0420400004600L, active3, 0x100000018000L, active4, 0xff8220e00000L, active5, 0xf0801000000000L);
      case 77:
      case 109:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0x20000000000L, active2, 0xe004000000000800L, active3, 0x1800000000000L, active4, 0xf0000000100080L, active5, 0L);
      case 78:
      case 110:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x7e00008000000L, active1, 0x200080000000L, active2, 0x2000000002L, active3, 0x1206000000800000L, active4, 0x4000000044028L, active5, 0x280000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40008000000000L, active1, 0x40002222001000L, active2, 0x8020000000L, active3, 0x240400000000L, active4, 0x1L, active5, 0x800000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0x1000L, active4, 0x200000040000000L, active5, 0x20000000000L);
      case 82:
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1f88000000000000L, active1, 0x9000000L, active2, 0x100000800000L, active3, 0x8000000820e0000L, active4, 0x4000082010L, active5, 0x2106000000000L);
      case 83:
      case 115:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x780200000L, active1, 0x2018000000026c0L, active2, 0x400800800000000L, active3, 0x4040000000L, active4, 0x2000000084000000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x24808000L, active1, 0x401c000800a00000L, active2, 0x190018L, active3, 0x130028b01000000L, active4, 0x4000000100000802L, active5, 0x18000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x8010000800L, active2, 0L, active3, 0x40L, active4, 0x100000000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L, active2, 0x1000000000L, active3, 0L, active4, 0x800000044L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x40000000000L, active3, 0x10000000000L, active4, 0L, active5, 0x1000000000000L);
      case 88:
      case 120:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40L, active3, 0L, active4, 0x1000L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 2);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xff8000000000L, active5, 0x1000000000000L);
      case 65:
      case 97:
         if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000008000000L, active1, 0x2008004L, active2, 0x2400000020L, active3, 0x200010800000800L, active4, 0L, active5, 0x8000000000L);
      case 66:
      case 98:
         if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000800L, active2, 0L, active3, 0x20000L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4180000000L, active1, 0x4000000080880280L, active2, 0x28000020000000L, active3, 0x2000000040000L, active4, 0x14000800L, active5, 0x10000000000L);
      case 68:
      case 100:
         if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0xc0800000L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x80000L) != 0L)
         {
            jjmatchedKind = 275;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 367;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x208000L, active1, 0x200da20008230038L, active2, 0xc0404802000c0800L, active3, 0x1100020300001000L, active4, 0x80e0000861000042L, active5, 0x10000000000000L);
      case 71:
      case 103:
         if ((active5 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0x800000000002438L, active5, 0L);
      case 72:
      case 104:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0x10000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x84000000001L, active2, 0x10008L, active3, 0x80008000000010L, active4, 0x4000030080L, active5, 0x2140000000000L);
      case 75:
      case 107:
         if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x300L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000070000000000L, active1, 0x40000000000002L, active2, 0x1002020040000400L, active3, 0x8101000000000L, active4, 0x1200c00000L, active5, 0x20800000000L);
      case 77:
      case 109:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L, active2, 0x4000000L, active3, 0x1800000000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10600000000000L, active1, 0x11010000000L, active2, 0L, active3, 0x200000000020440eL, active4, 0x100000000000000L, active5, 0L);
      case 79:
      case 111:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L, active1, 0L, active2, 0x301008000000L, active3, 0x400400400000100L, active4, 0x4404000000200004L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000001100000L, active3, 0L, active4, 0x100000L, active5, 0x20000000000000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200L, active4, 0x2000000000000000L, active5, 0x40000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xf88003000000000L, active1, 0L, active2, 0x200000L, active3, 0x4000000000400000L, active4, 0x1000000000000L, active5, 0x2000000000L);
      case 83:
      case 115:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1041808000000000L, active1, 0x1500000L, active2, 0x180800002000000L, active3, 0L, active4, 0x2000000L, active5, 0x84000000000000L);
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x100000000400L, active2, 0x400000800800000L, active3, 0x8804000004000000L, active4, 0x2000080040000L, active5, 0x4000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x402000000000L, active2, 0x16L, active3, 0x18000L, active4, 0x2100000001L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active2, 0x10000000L, active3, 0x4000000000L, active4, 0x5000L, active5, 0L);
      case 87:
      case 119:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 3);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0x4000000000000000L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x63180000000L, active1, 0x40000200000002L, active2, 0x5000000L, active3, 0x60040c0000000L, active4, 0x40e4405000L, active5, 0x20020000000000L);
      case 66:
      case 98:
         if ((active4 & 0x200000L) != 0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000000L, active3, 0x800000000L, active4, 0L, active5, 0x8000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0x80000000000L, active2, 0x400000000000L, active3, 0L, active4, 0x100000001000000L, active5, 0L);
      case 68:
      case 100:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xf8c610004000000L, active1, 0x4000L, active2, 0x400000022000000L, active3, 0x4001101000210000L, active4, 0x2000002000400L, active5, 0x80002800000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x30000L, active5, 0L);
      case 71:
      case 103:
         if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000L) != 0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L, active4, 0x800L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2100000000000L, active1, 0x400100008000400L, active2, 0x800050800400L, active3, 0x80008000000a0000L, active4, 0x10000000L, active5, 0x4000000000L);
      case 75:
      case 107:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L, active4, 0x4L, active5, 0L);
      case 76:
      case 108:
         if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x800L, active2, 0x2100000200004L, active3, 0x10L, active4, 0x2000000000000000L, active5, 0L);
      case 77:
      case 109:
         if ((active5 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 369;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x1L, active2, 0x82000000000L, active3, 0x200000000000000L, active4, 0x400000000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x804000000100L, active2, 0x200000000000L, active3, 0x80000000000000L, active4, 0x4000000000000L, active5, 0x1040000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000800000L, active1, 0x200L, active2, 0x2020000000010008L, active3, 0x8000800400L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x38000L, active2, 0L, active3, 0L, active4, 0x800000000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8200000L, active1, 0x9000000200098L, active2, 0x40000a00000810L, active3, 0x1d00000000000000L, active4, 0x2100000002L, active5, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x100000L) != 0L)
         {
            jjmatchedKind = 276;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000L) != 0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xeL, active4, 0xe0000000000200L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x21800000000000L, active1, 0x10080100020L, active2, 0x180000400000002L, active3, 0x2000000000000800L, active4, 0xff8000000020L, active5, 0x4000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80004L, active2, 0x100000L, active3, 0x200L, active4, 0x200000008L, active5, 0x40010000000000L);
      case 88:
      case 120:
         if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000000000L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 4);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0x180000000001L, active2, 0x80020000a00010L, active3, 0x9800000800040002L, active4, 0x100000000000008L, active5, 0x8800000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000L, active5, 0L);
      case 67:
      case 99:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x603000000000L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000L, active1, 0L, active2, 0x20000020000000L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x4000000000000L, active2, 0x200000000L, active3, 0x80000000000000L, active4, 0x804L, active5, 0x40000000000000L);
      case 70:
      case 102:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 72:
      case 104:
         if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 5;
         }
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30080000080L, active2, 0x2000c00000800L, active3, 0x2204000100000010L, active4, 0x4000002000010200L, active5, 0x10020000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L, active2, 0x10000000L, active3, 0xcL, active4, 0x4000005000L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0x4100000000000000L, active4, 0x402000000000000L, active5, 0x4000000000L);
      case 78:
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0xf82000000000000L, active1, 0x400000000200600L, active2, 0x8L, active3, 0x10000000a0000L, active4, 0x100000000L, active5, 0x2000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x100L, active2, 0xc000800000000000L, active3, 0L, active4, 0x800000000L, active5, 0L);
      case 80:
      case 112:
         if ((active4 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 5;
         }
         break;
      case 82:
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 370;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x5800000800000L, active1, 0x1aL, active2, 0x2140000007000000L, active3, 0L, active4, 0x80000000L, active5, 0xa0010000000000L);
      case 83:
      case 115:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8010000000000L, active1, 0x8800000000000L, active2, 0L, active3, 0L, active4, 0xff8030000000L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x60000200000L, active1, 0x400000000a0000L, active2, 0L, active3, 0x8000c0000000L, active4, 0xe0000040000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000L, active4, 0x2L, active5, 0L);
      case 87:
      case 119:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400L, active4, 0L, active5, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000L) != 0L)
         {
            jjmatchedKind = 273;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 5);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000000L, active1, 0x20000200008L, active2, 0x2000000000000008L, active3, 0x2000cL, active4, 0xe0000040000002L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 67:
      case 99:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000010000000000L, active1, 0x400L, active2, 0x20800000000L, active3, 0x2L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 6;
         }
         break;
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x8000000004010L, active2, 0x10000000L, active3, 0x4400000000200000L, active4, 0x2000000010000L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000000L, active4, 0L, active5, 0L);
      case 71:
      case 103:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000a00000L, active1, 0x40800000020000L, active2, 0x100000000000000L, active3, 0x100000000000000L, active4, 0x400ffc810000000L, active5, 0x80000000000000L);
      case 76:
      case 108:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0x400000L, active5, 0L);
      case 77:
      case 109:
         if ((active4 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L, active2, 0xc002800200000000L, active3, 0x4000000000010L, active4, 0x4000000000000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L, active2, 0x40000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000L) != 0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0L, active5, 0x40010000000000L);
      case 83:
      case 115:
         if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0x800000000L, active4, 0L, active5, 0x30008000000000L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0xf00403000004000L, active1, 0x90000000000L, active2, 0x80000000000000L, active3, 0x3000800000000000L, active4, 0x100002000000000L, active5, 0x2000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0x5000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x402000000L, active3, 0L, active4, 0x2000000000000000L, active5, 0L);
      case 89:
      case 121:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 6;
         }
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 6);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0xf00000000000000L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0xff8000000000L, active5, 0x2000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0x40000000L, active5, 0x1000000000000L);
      case 67:
      case 99:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0x200000000L, active3, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 7;
         }
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x400000L) != 0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 373;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000L, active1, 0x200L, active2, 0xc000000000000000L, active3, 0x1000800800000000L, active4, 0L, active5, 0x10000000000L);
      case 70:
      case 102:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 7;
         }
         break;
      case 71:
      case 103:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1c00000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 7;
         }
         break;
      case 76:
      case 108:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xe0000000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000000000000L, active3, 0x4100000000000000L, active4, 0x2000800000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8040000200000L, active1, 0x40080000020000L, active2, 0L, active3, 0x200000000L, active4, 0x10000000L, active5, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000000000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x200000L) != 0L)
         {
            jjmatchedKind = 213;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000020000000L, active3, 0x20000L, active4, 0L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 7;
         }
         break;
      case 84:
      case 116:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x820000000100L, active2, 0L, active3, 0xeL, active4, 0x400000000000000L, active5, 0x10000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 89:
      case 121:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 374;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 7);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x210000000L, active3, 0L, active4, 0L, active5, 0x1000000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000L, active5, 0L);
      case 71:
      case 103:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 8;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000100L, active2, 0L, active3, 0x10000000000000aL, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0x2000000040000000L, active5, 0x80000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0x220000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x9800000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 80:
      case 112:
         if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc0000000000000L, active5, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000L, active5, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0x2000000000L);
      case 83:
      case 115:
         if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 372;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L, active4, 0x10000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 305;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x4600000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000L, active5, 0L);
      case 89:
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x800000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 8);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0x200000000L, active4, 0x2040080000000000L, active5, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000000000000L, active5, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L, active4, 0x4400910000000000L, active5, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x600000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x20000000000L, active5, 0x80000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 9;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xaL, active4, 0x240000000000L, active5, 0x2000000000L);
      case 82:
      case 114:
         if ((active5 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 368;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000000L, active5, 0L);
      case 83:
      case 115:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L, active2, 0x800000000000L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000800000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000L, active5, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 9);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0xc08000000000L, active5, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000000L, active5, 0x10000000000L);
      case 68:
      case 100:
         if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000000L, active5, 0L);
      case 69:
      case 101:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active1, 0L, active2, 0x800000000000L, active3, 0L, active4, 0x100000000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000800000L, active1, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0x80000000000000L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000L, active5, 0x2000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x600000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 78:
      case 110:
         if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x220000000000L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 10;
         }
         break;
      case 83:
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 10;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 10;
         }
         break;
      case 84:
      case 116:
         if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000000000L, active5, 0L);
      case 89:
      case 121:
         if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 10;
         }
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 10);
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x8000000000L, active5, 0L);
      case 68:
      case 100:
         if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 11;
         }
         break;
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 11;
         }
         else if ((active5 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 375;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x400002000000000L, active2, 0L, active3, 0L, active4, 0x4000000000000000L, active5, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x80000000000000L, active5, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0x100000000000000L, active4, 0L, active5, 0L);
      case 75:
      case 107:
         if ((active4 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 11;
         }
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L, active2, 0L, active3, 0L, active4, 0x10000000000L, active5, 0x10000000000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 11;
         }
         else if ((active4 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x400000000000L, active5, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x200000000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x4000000000000000L, active3, 0L, active4, 0x20000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 11);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0x8000000000L, active5, 0L);
      case 67:
      case 99:
         if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 12;
         }
         break;
      case 70:
      case 102:
         if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 12;
         }
         break;
      case 71:
      case 103:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 12;
         }
         break;
      case 72:
      case 104:
         if ((active4 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 12;
         }
         break;
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L, active2, 0L, active3, 0L, active4, 0x4000010000000000L, active5, 0x10000000000L);
      case 82:
      case 114:
         if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 12;
         }
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x420000000000L, active5, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 12);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 12);
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 13;
         }
         break;
      case 69:
      case 101:
         if ((active4 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 297;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x400000000000L, active5, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x10000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x8000000000L, active5, 0L);
      case 84:
      case 116:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active2, 0x8000000000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 13);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 13);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      case 69:
      case 101:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0L, active4, 0x8000000000L, active5, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 82:
      case 114:
         if ((active4 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 14;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 14);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 14);
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0x2000000000000000L, active4, 0x8000000000L, active5, 0x10000000000L);
      case 72:
      case 104:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 15;
         }
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000000L, active3, 0L, active4, 0L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 15);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 15);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0L, active4, 0x8000000000L, active5, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 16;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active3, 0L, active4, 0L, active5, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 16);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active0 &= old0) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 16);
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0L, active5, 0x10000000000L);
      case 76:
      case 108:
         if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 17;
         }
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active3, 0L, active4, 0x8000000000L, active5, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 17);
}
private int jjMoveStringLiteralDfa18_0(long old3, long active3, long old4, long active4, long old5, long active5)
{
   if (((active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 17);
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 18;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active5, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 18);
}
private int jjMoveStringLiteralDfa19_0(long old4, long active4, long old5, long active5)
{
   if (((active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(7, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 18);
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active5 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 19);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 69;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 378)
                        kind = 378;
                     jjCheckNAddTwoStates(35, 36);
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 334)
                        kind = 334;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 1:
                  if (curChar == 32)
                     jjAddStates(6, 7);
                  break;
               case 9:
                  if (curChar == 32)
                     jjAddStates(8, 9);
                  break;
               case 17:
                  if (curChar == 32)
                     jjAddStates(10, 11);
                  break;
               case 28:
                  if (curChar == 32)
                     jjAddStates(12, 13);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 378)
                     kind = 378;
                  jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar != 46)
                     break;
                  if (kind > 378)
                     kind = 378;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 378)
                     kind = 378;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(39, 46);
                  break;
               case 39:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(45, 42);
                  break;
               case 40:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 41:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 42:
                  if (curChar == 39 && kind > 381)
                     kind = 381;
                  break;
               case 43:
                  if (curChar == 47)
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 45:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 47:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 48:
                  if ((0x8400000000L & l) == 0L)
                     break;
                  if (kind > 334)
                     kind = 334;
                  jjCheckNAddStates(0, 5);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 50:
                  if ((0x3ff008500000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if ((0x8400000000L & l) != 0L && kind > 382)
                     kind = 382;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 53:
                  if ((0x7ff200100000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if ((0x8400000000L & l) != 0L && kind > 383)
                     kind = 383;
                  break;
               case 55:
                  if (curChar == 37)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 57:
                  if (curChar == 37)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x8400000000L & l) != 0L && kind > 384)
                     kind = 384;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 61:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if ((0x8400000000L & l) != 0L && kind > 385)
                     kind = 385;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 376)
                     kind = 376;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 377)
                     kind = 377;
                  jjAddStates(24, 25);
                  break;
               case 66:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 377)
                     kind = 377;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 376)
                        kind = 376;
                     jjCheckNAddStates(26, 28);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x200000002000000L & l) != 0L && kind > 320)
                     kind = 320;
                  break;
               case 3:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 5:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x200000002000000L & l) != 0L && kind > 321)
                     kind = 321;
                  break;
               case 11:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 13:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0x200000002000000L & l) != 0L && kind > 322)
                     kind = 322;
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 22:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x100000001000L & l) != 0L && kind > 323)
                     kind = 323;
                  break;
               case 30:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 34:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 41:
                  jjCheckNAddTwoStates(41, 43);
                  break;
               case 46:
                  jjCheckNAddStates(14, 17);
                  break;
               case 49:
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 53:
                  if (curChar == 95)
                     jjAddStates(29, 30);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(18, 20);
                  break;
               case 59:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 376)
                     kind = 376;
                  jjCheckNAddStates(26, 28);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 376)
                     kind = 376;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 377)
                     kind = 377;
                  jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
               case 68:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 377)
                     kind = 377;
                  jjCheckNAdd(68);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 41:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(41, 43);
                  break;
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 69 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(31, 33);
                  break;
               case 3:
                  if (curChar == 47)
                     jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x4000000040000L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if ((0x400000004000L & l) != 0L)
                     kind = 9;
                  break;
               case 4:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   49, 52, 55, 56, 59, 60, 1, 3, 9, 11, 17, 20, 28, 32, 41, 43, 
   39, 46, 56, 57, 58, 60, 61, 62, 65, 66, 64, 65, 66, 53, 54, 1, 
   2, 4, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\51", "\75", "\76\75", "\74\75", "\76", "\74", "\41\75", 
"\45", "\46", null, "\173", "\175", "\52", "\43", "\53", "\54", "\55", "\56", "\57", 
"\72", "\72\72", "\74\76", "\77", "\137", "\174", "\133", "\135", "\174\174", 
"\55\76", "\56\56\56", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\73", "\41\41", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xe7ffffffffffffffL, 0xfL, 
};
static final long[] jjtoSkip = {
   0x67eL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x600L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x980L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[69];
private final int[] jjstateSet = new int[138];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public SqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 69; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
