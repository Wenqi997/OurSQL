/* Generated By:JavaCC: Do not edit this line. SqlParserConstants.java */
package com.ucd.oursql.sql.parsing;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SqlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int ADD = 12;
  /** RegularExpression Id. */
  int ALL = 13;
  /** RegularExpression Id. */
  int ALLOCATE = 14;
  /** RegularExpression Id. */
  int ALTER = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int ANY = 17;
  /** RegularExpression Id. */
  int ARE = 18;
  /** RegularExpression Id. */
  int AS = 19;
  /** RegularExpression Id. */
  int ASC = 20;
  /** RegularExpression Id. */
  int ASSERTION = 21;
  /** RegularExpression Id. */
  int AT = 22;
  /** RegularExpression Id. */
  int AUTHORIZATION = 23;
  /** RegularExpression Id. */
  int AVG = 24;
  /** RegularExpression Id. */
  int BEGIN = 25;
  /** RegularExpression Id. */
  int BETWEEN = 26;
  /** RegularExpression Id. */
  int BINARY = 27;
  /** RegularExpression Id. */
  int BIT = 28;
  /** RegularExpression Id. */
  int BOTH = 29;
  /** RegularExpression Id. */
  int BY = 30;
  /** RegularExpression Id. */
  int CASCADE = 31;
  /** RegularExpression Id. */
  int CASCADED = 32;
  /** RegularExpression Id. */
  int CASE = 33;
  /** RegularExpression Id. */
  int CAST = 34;
  /** RegularExpression Id. */
  int CHAR = 35;
  /** RegularExpression Id. */
  int CHARACTER = 36;
  /** RegularExpression Id. */
  int CHARACTER_LENGTH = 37;
  /** RegularExpression Id. */
  int CHECK = 38;
  /** RegularExpression Id. */
  int CLOSE = 39;
  /** RegularExpression Id. */
  int COALESCE = 40;
  /** RegularExpression Id. */
  int COLLATE = 41;
  /** RegularExpression Id. */
  int COLLATION = 42;
  /** RegularExpression Id. */
  int COLUMN = 43;
  /** RegularExpression Id. */
  int COMMIT = 44;
  /** RegularExpression Id. */
  int CONNECT = 45;
  /** RegularExpression Id. */
  int CONNECTION = 46;
  /** RegularExpression Id. */
  int CONSTRAINT = 47;
  /** RegularExpression Id. */
  int CONSTRAINTS = 48;
  /** RegularExpression Id. */
  int CONTINUE = 49;
  /** RegularExpression Id. */
  int CONVERT = 50;
  /** RegularExpression Id. */
  int CORRESPONDING = 51;
  /** RegularExpression Id. */
  int COUNT = 52;
  /** RegularExpression Id. */
  int CREATE = 53;
  /** RegularExpression Id. */
  int CROSS = 54;
  /** RegularExpression Id. */
  int CURRENT = 55;
  /** RegularExpression Id. */
  int CURRENT_DATE = 56;
  /** RegularExpression Id. */
  int CURRENT_TIME = 57;
  /** RegularExpression Id. */
  int CURRENT_TIMESTAMP = 58;
  /** RegularExpression Id. */
  int CURRENT_USER = 59;
  /** RegularExpression Id. */
  int CURSOR = 60;
  /** RegularExpression Id. */
  int D = 61;
  /** RegularExpression Id. */
  int DEALLOCATE = 62;
  /** RegularExpression Id. */
  int DEC = 63;
  /** RegularExpression Id. */
  int DECIMAL = 64;
  /** RegularExpression Id. */
  int DECLARE = 65;
  /** RegularExpression Id. */
  int _DEFAULT = 66;
  /** RegularExpression Id. */
  int DEFERRABLE = 67;
  /** RegularExpression Id. */
  int DEFERRED = 68;
  /** RegularExpression Id. */
  int DELETE = 69;
  /** RegularExpression Id. */
  int DESC = 70;
  /** RegularExpression Id. */
  int DESCRIBE = 71;
  /** RegularExpression Id. */
  int DIAGNOSTICS = 72;
  /** RegularExpression Id. */
  int DISCONNECT = 73;
  /** RegularExpression Id. */
  int DISTINCT = 74;
  /** RegularExpression Id. */
  int DOUBLE = 75;
  /** RegularExpression Id. */
  int DROP = 76;
  /** RegularExpression Id. */
  int ELSE = 77;
  /** RegularExpression Id. */
  int ENDEXEC = 78;
  /** RegularExpression Id. */
  int ESCAPE = 79;
  /** RegularExpression Id. */
  int EXCEPT = 80;
  /** RegularExpression Id. */
  int EXCEPTION = 81;
  /** RegularExpression Id. */
  int EXEC = 82;
  /** RegularExpression Id. */
  int EXECUTE = 83;
  /** RegularExpression Id. */
  int EXISTS = 84;
  /** RegularExpression Id. */
  int EXTERNAL = 85;
  /** RegularExpression Id. */
  int FALSE = 86;
  /** RegularExpression Id. */
  int FETCH = 87;
  /** RegularExpression Id. */
  int FIRST = 88;
  /** RegularExpression Id. */
  int FLOAT = 89;
  /** RegularExpression Id. */
  int FOR = 90;
  /** RegularExpression Id. */
  int FOREIGN = 91;
  /** RegularExpression Id. */
  int FOUND = 92;
  /** RegularExpression Id. */
  int FROM = 93;
  /** RegularExpression Id. */
  int FULL = 94;
  /** RegularExpression Id. */
  int FUNCTION = 95;
  /** RegularExpression Id. */
  int GET = 96;
  /** RegularExpression Id. */
  int GLOBAL = 97;
  /** RegularExpression Id. */
  int GO = 98;
  /** RegularExpression Id. */
  int GOTO = 99;
  /** RegularExpression Id. */
  int GRANT = 100;
  /** RegularExpression Id. */
  int GROUP = 101;
  /** RegularExpression Id. */
  int HAVING = 102;
  /** RegularExpression Id. */
  int HOUR = 103;
  /** RegularExpression Id. */
  int IDENTITY = 104;
  /** RegularExpression Id. */
  int IMMEDIATE = 105;
  /** RegularExpression Id. */
  int IN = 106;
  /** RegularExpression Id. */
  int INDICATOR = 107;
  /** RegularExpression Id. */
  int INITIALLY = 108;
  /** RegularExpression Id. */
  int INNER = 109;
  /** RegularExpression Id. */
  int INPUT = 110;
  /** RegularExpression Id. */
  int INSENSITIVE = 111;
  /** RegularExpression Id. */
  int INSERT = 112;
  /** RegularExpression Id. */
  int INT = 113;
  /** RegularExpression Id. */
  int INTEGER = 114;
  /** RegularExpression Id. */
  int INTERSECT = 115;
  /** RegularExpression Id. */
  int INTO = 116;
  /** RegularExpression Id. */
  int IS = 117;
  /** RegularExpression Id. */
  int ISOLATION = 118;
  /** RegularExpression Id. */
  int JOIN = 119;
  /** RegularExpression Id. */
  int KEY = 120;
  /** RegularExpression Id. */
  int LAST = 121;
  /** RegularExpression Id. */
  int LEADING = 122;
  /** RegularExpression Id. */
  int LEFT = 123;
  /** RegularExpression Id. */
  int LIKE = 124;
  /** RegularExpression Id. */
  int LOWER = 125;
  /** RegularExpression Id. */
  int MATCH = 126;
  /** RegularExpression Id. */
  int MAX = 127;
  /** RegularExpression Id. */
  int MIN = 128;
  /** RegularExpression Id. */
  int MINUTE = 129;
  /** RegularExpression Id. */
  int MODULE = 130;
  /** RegularExpression Id. */
  int NATIONAL = 131;
  /** RegularExpression Id. */
  int NATURAL = 132;
  /** RegularExpression Id. */
  int NCHAR = 133;
  /** RegularExpression Id. */
  int NEXT = 134;
  /** RegularExpression Id. */
  int NO = 135;
  /** RegularExpression Id. */
  int NOT = 136;
  /** RegularExpression Id. */
  int NULL = 137;
  /** RegularExpression Id. */
  int NULLIF = 138;
  /** RegularExpression Id. */
  int NUMERIC = 139;
  /** RegularExpression Id. */
  int OF = 140;
  /** RegularExpression Id. */
  int ON = 141;
  /** RegularExpression Id. */
  int ONLY = 142;
  /** RegularExpression Id. */
  int OPEN = 143;
  /** RegularExpression Id. */
  int OPTION = 144;
  /** RegularExpression Id. */
  int OR = 145;
  /** RegularExpression Id. */
  int ORDER = 146;
  /** RegularExpression Id. */
  int OUTER = 147;
  /** RegularExpression Id. */
  int OUTPUT = 148;
  /** RegularExpression Id. */
  int OVERLAPS = 149;
  /** RegularExpression Id. */
  int PAD = 150;
  /** RegularExpression Id. */
  int PARTIAL = 151;
  /** RegularExpression Id. */
  int PREPARE = 152;
  /** RegularExpression Id. */
  int PRESERVE = 153;
  /** RegularExpression Id. */
  int PRIMARY = 154;
  /** RegularExpression Id. */
  int PRIOR = 155;
  /** RegularExpression Id. */
  int PRIVILEGES = 156;
  /** RegularExpression Id. */
  int PROCEDURE = 157;
  /** RegularExpression Id. */
  int PUBLIC = 158;
  /** RegularExpression Id. */
  int READ = 159;
  /** RegularExpression Id. */
  int REAL = 160;
  /** RegularExpression Id. */
  int REFERENCES = 161;
  /** RegularExpression Id. */
  int RELATIVE = 162;
  /** RegularExpression Id. */
  int RESTRICT = 163;
  /** RegularExpression Id. */
  int REVOKE = 164;
  /** RegularExpression Id. */
  int RENAME = 165;
  /** RegularExpression Id. */
  int USE = 166;
  /** RegularExpression Id. */
  int SHOW = 167;
  /** RegularExpression Id. */
  int RIGHT = 168;
  /** RegularExpression Id. */
  int ROLLBACK = 169;
  /** RegularExpression Id. */
  int ROWS = 170;
  /** RegularExpression Id. */
  int SCHEMA = 171;
  /** RegularExpression Id. */
  int SCROLL = 172;
  /** RegularExpression Id. */
  int SECOND = 173;
  /** RegularExpression Id. */
  int SELECT = 174;
  /** RegularExpression Id. */
  int SESSION_USER = 175;
  /** RegularExpression Id. */
  int SET = 176;
  /** RegularExpression Id. */
  int SMALLINT = 177;
  /** RegularExpression Id. */
  int SOME = 178;
  /** RegularExpression Id. */
  int SPACE = 179;
  /** RegularExpression Id. */
  int SQL = 180;
  /** RegularExpression Id. */
  int SQLCODE = 181;
  /** RegularExpression Id. */
  int SQLERROR = 182;
  /** RegularExpression Id. */
  int SQLSTATE = 183;
  /** RegularExpression Id. */
  int SUBSTRING = 184;
  /** RegularExpression Id. */
  int SUM = 185;
  /** RegularExpression Id. */
  int SYSTEM_USER = 186;
  /** RegularExpression Id. */
  int T = 187;
  /** RegularExpression Id. */
  int TABLE = 188;
  /** RegularExpression Id. */
  int TEMPORARY = 189;
  /** RegularExpression Id. */
  int TIMEZONE_HOUR = 190;
  /** RegularExpression Id. */
  int TIMEZONE_MINUTE = 191;
  /** RegularExpression Id. */
  int TO = 192;
  /** RegularExpression Id. */
  int TRANSACTION = 193;
  /** RegularExpression Id. */
  int TRANSLATE = 194;
  /** RegularExpression Id. */
  int TRANSLATION = 195;
  /** RegularExpression Id. */
  int TRAILING = 196;
  /** RegularExpression Id. */
  int TRIM = 197;
  /** RegularExpression Id. */
  int TRUE = 198;
  /** RegularExpression Id. */
  int TS = 199;
  /** RegularExpression Id. */
  int UNION = 200;
  /** RegularExpression Id. */
  int UNIQUE = 201;
  /** RegularExpression Id. */
  int UNKNOWN = 202;
  /** RegularExpression Id. */
  int UPDATE = 203;
  /** RegularExpression Id. */
  int UPPER = 204;
  /** RegularExpression Id. */
  int USER = 205;
  /** RegularExpression Id. */
  int USING = 206;
  /** RegularExpression Id. */
  int VALUE = 207;
  /** RegularExpression Id. */
  int VALUES = 208;
  /** RegularExpression Id. */
  int VARBINARY = 209;
  /** RegularExpression Id. */
  int VARCHAR = 210;
  /** RegularExpression Id. */
  int VARYING = 211;
  /** RegularExpression Id. */
  int VIEW = 212;
  /** RegularExpression Id. */
  int WHENEVER = 213;
  /** RegularExpression Id. */
  int WHERE = 214;
  /** RegularExpression Id. */
  int WINDOW = 215;
  /** RegularExpression Id. */
  int WITH = 216;
  /** RegularExpression Id. */
  int WORK = 217;
  /** RegularExpression Id. */
  int WRITE = 218;
  /** RegularExpression Id. */
  int YEAR = 219;
  /** RegularExpression Id. */
  int WEEK = 220;
  /** RegularExpression Id. */
  int NOW = 221;
  /** RegularExpression Id. */
  int SYSDATE = 222;
  /** RegularExpression Id. */
  int CURDATE = 223;
  /** RegularExpression Id. */
  int DATEDIFF = 224;
  /** RegularExpression Id. */
  int DATE_FORMAT = 225;
  /** RegularExpression Id. */
  int FLOOR = 226;
  /** RegularExpression Id. */
  int DATABASES = 227;
  /** RegularExpression Id. */
  int TABLES = 228;
  /** RegularExpression Id. */
  int ABS = 229;
  /** RegularExpression Id. */
  int ABSVAL = 230;
  /** RegularExpression Id. */
  int ACTION = 231;
  /** RegularExpression Id. */
  int ALWAYS = 232;
  /** RegularExpression Id. */
  int AFTER = 233;
  /** RegularExpression Id. */
  int BLOB = 234;
  /** RegularExpression Id. */
  int C = 235;
  /** RegularExpression Id. */
  int CALLED = 236;
  /** RegularExpression Id. */
  int CLOB = 237;
  /** RegularExpression Id. */
  int COBOL = 238;
  /** RegularExpression Id. */
  int COMMITTED = 239;
  /** RegularExpression Id. */
  int COMMENT = 240;
  /** RegularExpression Id. */
  int CONCAT = 241;
  /** RegularExpression Id. */
  int CONTAINS = 242;
  /** RegularExpression Id. */
  int CYCLE = 243;
  /** RegularExpression Id. */
  int DATA = 244;
  /** RegularExpression Id. */
  int DATE = 245;
  /** RegularExpression Id. */
  int DAY = 246;
  /** RegularExpression Id. */
  int DEFINER = 247;
  /** RegularExpression Id. */
  int DETERMINISTIC = 248;
  /** RegularExpression Id. */
  int DYNAMIC = 249;
  /** RegularExpression Id. */
  int ENFORCED = 250;
  /** RegularExpression Id. */
  int FORTRAN = 251;
  /** RegularExpression Id. */
  int GENERATED = 252;
  /** RegularExpression Id. */
  int IDENTITY_VAL_LOCAL = 253;
  /** RegularExpression Id. */
  int INCREMENT = 254;
  /** RegularExpression Id. */
  int INITIAL = 255;
  /** RegularExpression Id. */
  int INOUT = 256;
  /** RegularExpression Id. */
  int INTERVAL = 257;
  /** RegularExpression Id. */
  int INVOKER = 258;
  /** RegularExpression Id. */
  int LANGUAGE = 259;
  /** RegularExpression Id. */
  int LARGE = 260;
  /** RegularExpression Id. */
  int LENGTH = 261;
  /** RegularExpression Id. */
  int LEVEL = 262;
  /** RegularExpression Id. */
  int LIMIT = 263;
  /** RegularExpression Id. */
  int LOCKS = 264;
  /** RegularExpression Id. */
  int LOCKSIZE = 265;
  /** RegularExpression Id. */
  int LOGGED = 266;
  /** RegularExpression Id. */
  int MATCHED = 267;
  /** RegularExpression Id. */
  int MAXVALUE = 268;
  /** RegularExpression Id. */
  int MERGE = 269;
  /** RegularExpression Id. */
  int MINVALUE = 270;
  /** RegularExpression Id. */
  int MOD = 271;
  /** RegularExpression Id. */
  int MODIFIES = 272;
  /** RegularExpression Id. */
  int MODIFY = 273;
  /** RegularExpression Id. */
  int MONTH = 274;
  /** RegularExpression Id. */
  int _MORE = 275;
  /** RegularExpression Id. */
  int MUMPS = 276;
  /** RegularExpression Id. */
  int NCLOB = 277;
  /** RegularExpression Id. */
  int NULLABLE = 278;
  /** RegularExpression Id. */
  int NULLS = 279;
  /** RegularExpression Id. */
  int OBJECT = 280;
  /** RegularExpression Id. */
  int OFFSET = 281;
  /** RegularExpression Id. */
  int PASCAL = 282;
  /** RegularExpression Id. */
  int PLI = 283;
  /** RegularExpression Id. */
  int PRECISION = 284;
  /** RegularExpression Id. */
  int RELEASE = 285;
  /** RegularExpression Id. */
  int REPEATABLE = 286;
  /** RegularExpression Id. */
  int RESTART = 287;
  /** RegularExpression Id. */
  int RETURNS = 288;
  /** RegularExpression Id. */
  int ROLLUP = 289;
  /** RegularExpression Id. */
  int ROW = 290;
  /** RegularExpression Id. */
  int SAVEPOINT = 291;
  /** RegularExpression Id. */
  int SCALE = 292;
  /** RegularExpression Id. */
  int SECURITY = 293;
  /** RegularExpression Id. */
  int SERIALIZABLE = 294;
  /** RegularExpression Id. */
  int SQL_TSI_FRAC_SECOND = 295;
  /** RegularExpression Id. */
  int SQL_TSI_SECOND = 296;
  /** RegularExpression Id. */
  int SQL_TSI_MINUTE = 297;
  /** RegularExpression Id. */
  int SQL_TSI_HOUR = 298;
  /** RegularExpression Id. */
  int SQL_TSI_DAY = 299;
  /** RegularExpression Id. */
  int SQL_TSI_WEEK = 300;
  /** RegularExpression Id. */
  int SQL_TSI_MONTH = 301;
  /** RegularExpression Id. */
  int SQL_TSI_QUARTER = 302;
  /** RegularExpression Id. */
  int SQL_TSI_YEAR = 303;
  /** RegularExpression Id. */
  int START = 304;
  /** RegularExpression Id. */
  int STATEMENT = 305;
  /** RegularExpression Id. */
  int SYNONYM = 306;
  /** RegularExpression Id. */
  int THEN = 307;
  /** RegularExpression Id. */
  int TIME = 308;
  /** RegularExpression Id. */
  int TIMESTAMP = 309;
  /** RegularExpression Id. */
  int TIMESTAMPADD = 310;
  /** RegularExpression Id. */
  int TIMESTAMPDIFF = 311;
  /** RegularExpression Id. */
  int TRUNCATE = 312;
  /** RegularExpression Id. */
  int TYPE = 313;
  /** RegularExpression Id. */
  int UNCOMMITTED = 314;
  /** RegularExpression Id. */
  int USAGE = 315;
  /** RegularExpression Id. */
  int WHEN = 316;
  /** RegularExpression Id. */
  int DERBYPLAN = 317;
  /** RegularExpression Id. */
  int AUTO_INCREMENT = 318;
  /** RegularExpression Id. */
  int INDEX = 319;
  /** RegularExpression Id. */
  int GROUP_BY = 320;
  /** RegularExpression Id. */
  int ORDER_BY = 321;
  /** RegularExpression Id. */
  int PRIMARY_KEY = 322;
  /** RegularExpression Id. */
  int NOT_NULL = 323;
  /** RegularExpression Id. */
  int LBRACKET = 324;
  /** RegularExpression Id. */
  int RBRACKET = 325;
  /** RegularExpression Id. */
  int EQ = 326;
  /** RegularExpression Id. */
  int GT = 327;
  /** RegularExpression Id. */
  int LT = 328;
  /** RegularExpression Id. */
  int LQ = 329;
  /** RegularExpression Id. */
  int RQ = 330;
  /** RegularExpression Id. */
  int NE = 331;
  /** RegularExpression Id. */
  int PERCENT = 332;
  /** RegularExpression Id. */
  int AMPERSAND = 333;
  /** RegularExpression Id. */
  int QUOTE = 334;
  /** RegularExpression Id. */
  int LEFT_BRACE = 335;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 336;
  /** RegularExpression Id. */
  int ASTERISK = 337;
  /** RegularExpression Id. */
  int HASH = 338;
  /** RegularExpression Id. */
  int PLUS_SIGN = 339;
  /** RegularExpression Id. */
  int COMMA = 340;
  /** RegularExpression Id. */
  int MINUS_SIGN = 341;
  /** RegularExpression Id. */
  int DOT = 342;
  /** RegularExpression Id. */
  int SOLIDUS = 343;
  /** RegularExpression Id. */
  int COLON = 344;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 345;
  /** RegularExpression Id. */
  int NOT_EQUALS_OPERATOR = 346;
  /** RegularExpression Id. */
  int QUESTION_MARK = 347;
  /** RegularExpression Id. */
  int UNDERSCORE = 348;
  /** RegularExpression Id. */
  int VERTICAL_BAR = 349;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 350;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 351;
  /** RegularExpression Id. */
  int CONCATENATION_OPERATOR = 352;
  /** RegularExpression Id. */
  int FIELD_REFERENCE = 353;
  /** RegularExpression Id. */
  int ELLIPSIS = 354;
  /** RegularExpression Id. */
  int BOOLEAN = 355;
  /** RegularExpression Id. */
  int CALL = 356;
  /** RegularExpression Id. */
  int CURRENT_ROLE = 357;
  /** RegularExpression Id. */
  int CURTIME = 358;
  /** RegularExpression Id. */
  int DATABASE = 359;
  /** RegularExpression Id. */
  int GET_CURRENT_CONNECTION = 360;
  /** RegularExpression Id. */
  int EXPLAIN = 361;
  /** RegularExpression Id. */
  int BIGINT = 362;
  /** RegularExpression Id. */
  int LONG = 363;
  /** RegularExpression Id. */
  int LTRIM = 364;
  /** RegularExpression Id. */
  int NONE = 365;
  /** RegularExpression Id. */
  int OVER = 366;
  /** RegularExpression Id. */
  int ROLE = 367;
  /** RegularExpression Id. */
  int ROWNUMBER = 368;
  /** RegularExpression Id. */
  int RTRIM = 369;
  /** RegularExpression Id. */
  int SUBSTR = 370;
  /** RegularExpression Id. */
  int XML = 371;
  /** RegularExpression Id. */
  int XMLEXISTS = 372;
  /** RegularExpression Id. */
  int XMLPARSE = 373;
  /** RegularExpression Id. */
  int XMLQUERY = 374;
  /** RegularExpression Id. */
  int XMLSERIALIZE = 375;
  /** RegularExpression Id. */
  int ID = 376;
  /** RegularExpression Id. */
  int NAME = 377;
  /** RegularExpression Id. */
  int NUMBER = 378;
  /** RegularExpression Id. */
  int LETTER = 379;
  /** RegularExpression Id. */
  int DIGIT = 380;
  /** RegularExpression Id. */
  int STRING = 381;
  /** RegularExpression Id. */
  int TEXT = 382;
  /** RegularExpression Id. */
  int TIMEORDATE = 383;
  /** RegularExpression Id. */
  int LIKETEXT = 384;
  /** RegularExpression Id. */
  int LIKETEXT2 = 385;
  /** RegularExpression Id. */
  int STATEMENT_END = 386;
  /** RegularExpression Id. */
  int END = 387;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"  \"",
    "\"//\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 11>",
    "\"add\"",
    "\"all\"",
    "\"allocate\"",
    "\"alter\"",
    "\"and\"",
    "\"any\"",
    "\"are\"",
    "\"as\"",
    "\"asc\"",
    "\"assertion\"",
    "\"at\"",
    "\"authorization\"",
    "\"avg\"",
    "\"begin\"",
    "\"between\"",
    "\"binary\"",
    "\"bit\"",
    "\"both\"",
    "\"by\"",
    "\"cascade\"",
    "\"cascaded\"",
    "\"case\"",
    "\"cast\"",
    "\"char\"",
    "\"character\"",
    "\"character_length\"",
    "\"check\"",
    "\"close\"",
    "\"coalesce\"",
    "\"collate\"",
    "\"collation\"",
    "\"column\"",
    "\"commit\"",
    "\"connect\"",
    "\"connection\"",
    "\"constraint\"",
    "\"constraints\"",
    "\"continue\"",
    "\"convert\"",
    "\"corresponding\"",
    "\"count\"",
    "\"create\"",
    "\"cross\"",
    "\"current\"",
    "\"current_date\"",
    "\"current_time\"",
    "\"current_timestamp\"",
    "\"current_user\"",
    "\"cursor\"",
    "\"d\"",
    "\"deallocate\"",
    "\"dec\"",
    "\"decimal\"",
    "\"declare\"",
    "\"default\"",
    "\"deferrable\"",
    "\"deferred\"",
    "\"delete\"",
    "\"desc\"",
    "\"describe\"",
    "\"diagnostics\"",
    "\"disconnect\"",
    "\"distinct\"",
    "\"double\"",
    "\"drop\"",
    "\"else\"",
    "\"end-exec\"",
    "\"escape\"",
    "\"except\"",
    "\"exception\"",
    "\"exec\"",
    "\"execute\"",
    "\"exists\"",
    "\"external\"",
    "\"false\"",
    "\"fetch\"",
    "\"first\"",
    "\"float\"",
    "\"for\"",
    "\"foreign\"",
    "\"found\"",
    "\"from\"",
    "\"full\"",
    "\"function\"",
    "\"get\"",
    "\"global\"",
    "\"go\"",
    "\"goto\"",
    "\"grant\"",
    "\"group\"",
    "\"having\"",
    "\"hour\"",
    "\"identity\"",
    "\"immediate\"",
    "\"in\"",
    "\"indicator\"",
    "\"initially\"",
    "\"inner\"",
    "\"input\"",
    "\"insensitive\"",
    "\"insert\"",
    "\"int\"",
    "\"integer\"",
    "\"intersect\"",
    "\"into\"",
    "\"is\"",
    "\"isolation\"",
    "\"join\"",
    "\"key\"",
    "\"last\"",
    "\"leading\"",
    "\"left\"",
    "\"like\"",
    "\"lower\"",
    "\"match\"",
    "\"max\"",
    "\"min\"",
    "\"minute\"",
    "\"module\"",
    "\"national\"",
    "\"natural\"",
    "\"nchar\"",
    "\"next\"",
    "\"no\"",
    "\"not\"",
    "\"null\"",
    "\"nullif\"",
    "\"numeric\"",
    "\"of\"",
    "\"on\"",
    "\"only\"",
    "\"open\"",
    "\"option\"",
    "\"or\"",
    "\"order\"",
    "\"outer\"",
    "\"output\"",
    "\"overlaps\"",
    "\"pad\"",
    "\"partial\"",
    "\"prepare\"",
    "\"preserve\"",
    "\"primary\"",
    "\"prior\"",
    "\"privileges\"",
    "\"procedure\"",
    "\"public\"",
    "\"read\"",
    "\"real\"",
    "\"references\"",
    "\"relative\"",
    "\"restrict\"",
    "\"revoke\"",
    "\"rename\"",
    "\"use\"",
    "\"show\"",
    "\"right\"",
    "\"rollback\"",
    "\"rows\"",
    "\"schema\"",
    "\"scroll\"",
    "\"second\"",
    "\"select\"",
    "\"session_user\"",
    "\"set\"",
    "\"smallint\"",
    "\"some\"",
    "\"space\"",
    "\"sql\"",
    "\"sqlcode\"",
    "\"sqlerror\"",
    "\"sqlstate\"",
    "\"substring\"",
    "\"sum\"",
    "\"system_user\"",
    "\"t\"",
    "\"table\"",
    "\"temporary\"",
    "\"timezone_hour\"",
    "\"timezone_minute\"",
    "\"to\"",
    "\"transaction\"",
    "\"translate\"",
    "\"translation\"",
    "\"trailing\"",
    "\"trim\"",
    "\"true\"",
    "\"ts\"",
    "\"union\"",
    "\"unique\"",
    "\"unknown\"",
    "\"update\"",
    "\"upper\"",
    "\"user\"",
    "\"using\"",
    "\"value\"",
    "\"values\"",
    "\"varbinary\"",
    "\"varchar\"",
    "\"varying\"",
    "\"view\"",
    "\"whenever\"",
    "\"where\"",
    "\"window\"",
    "\"with\"",
    "\"work\"",
    "\"write\"",
    "\"year\"",
    "\"week\"",
    "\"now\"",
    "\"sysdate\"",
    "\"curdate\"",
    "\"datediff\"",
    "\"date_fromat\"",
    "\"floor\"",
    "\"databases\"",
    "\"tables\"",
    "\"abs\"",
    "\"absval\"",
    "\"action\"",
    "\"always\"",
    "\"after\"",
    "\"blob\"",
    "\"c\"",
    "\"called\"",
    "\"clob\"",
    "\"cobol\"",
    "\"committed\"",
    "\"comment\"",
    "\"concat\"",
    "\"contains\"",
    "\"cycle\"",
    "\"data\"",
    "\"date\"",
    "\"day\"",
    "\"definer\"",
    "\"deterministic\"",
    "\"dynamic\"",
    "\"enforced\"",
    "\"fortran\"",
    "\"generated\"",
    "\"identity_val_local\"",
    "\"increment\"",
    "\"initial\"",
    "\"inout\"",
    "\"interval\"",
    "\"invoker\"",
    "\"language\"",
    "\"large\"",
    "\"length\"",
    "\"level\"",
    "\"limit\"",
    "\"locks\"",
    "\"locksize\"",
    "\"logged\"",
    "\"matched\"",
    "\"maxvalue\"",
    "\"merge\"",
    "\"minvalue\"",
    "\"mod\"",
    "\"modifies\"",
    "\"modify\"",
    "\"month\"",
    "\"more\"",
    "\"mumps\"",
    "\"nclob\"",
    "\"nullable\"",
    "\"nulls\"",
    "\"object\"",
    "\"offset\"",
    "\"pascal\"",
    "\"pli\"",
    "\"precision\"",
    "\"release\"",
    "\"repeatable\"",
    "\"restart\"",
    "\"returns\"",
    "\"rollup\"",
    "\"row\"",
    "\"savepoint\"",
    "\"scale\"",
    "\"security\"",
    "\"serializable\"",
    "\"sql_tsi_frac_second\"",
    "\"sql_tsi_second\"",
    "\"sql_tsi_minute\"",
    "\"sql_tsi_hour\"",
    "\"sql_tsi_day\"",
    "\"sql_tsi_week\"",
    "\"sql_tsi_month\"",
    "\"sql_tsi_quarter\"",
    "\"sql_tsi_year\"",
    "\"start\"",
    "\"statement\"",
    "\"synonym\"",
    "\"then\"",
    "\"time\"",
    "\"timestamp\"",
    "\"timestampadd\"",
    "\"timestampdiff\"",
    "\"truncate\"",
    "\"type\"",
    "\"uncommitted\"",
    "\"usage\"",
    "\"when\"",
    "\"--sqlkvplan\"",
    "\"auto_increment\"",
    "\"index\"",
    "<GROUP_BY>",
    "<ORDER_BY>",
    "<PRIMARY_KEY>",
    "<NOT_NULL>",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"!=\"",
    "\"%\"",
    "\"&\"",
    "<QUOTE>",
    "\"{\"",
    "\"}\"",
    "\"*\"",
    "\"#\"",
    "\"+\"",
    "\",\"",
    "\"-\"",
    "\".\"",
    "\"/\"",
    "\":\"",
    "\"::\"",
    "\"<>\"",
    "\"?\"",
    "\"_\"",
    "\"|\"",
    "\"[\"",
    "\"]\"",
    "\"||\"",
    "\"->\"",
    "\"...\"",
    "\"boolean\"",
    "\"call\"",
    "\"current_role\"",
    "\"curtime\"",
    "\"database\"",
    "\"getCurrentConnection\"",
    "\"explain\"",
    "\"bigint\"",
    "\"long\"",
    "\"ltrim\"",
    "\"none\"",
    "\"over\"",
    "\"role\"",
    "\"row_number\"",
    "\"rtrim\"",
    "\"substr\"",
    "\"xml\"",
    "\"xmlexists\"",
    "\"xmlparse\"",
    "\"xmlquery\"",
    "\"xmlserialize\"",
    "<ID>",
    "<NAME>",
    "<NUMBER>",
    "<LETTER>",
    "<DIGIT>",
    "<STRING>",
    "<TEXT>",
    "<TIMEORDATE>",
    "<LIKETEXT>",
    "<LIKETEXT2>",
    "\";\"",
    "\"!!\"",
  };

}
