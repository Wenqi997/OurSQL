/* Generated By:JavaCC: Do not edit this line. SqlParser.java */
package com.ucd.oursql.sql.parsing;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;
import com.ucd.oursql.sql.execution.ExecuteStatement;
import com.ucd.oursql.sql.execution.database.DatabaseStatements;
import com.ucd.oursql.sql.execution.table.TableStatements;

public class SqlParser implements SqlParserConstants {

    private List<Object> sql = new ArrayList<Object>(); // sqlÊú?Â§ñÂ±ÇËØ≠Âè•
    private List<Object> subquerySql = new ArrayList<Object>();//subquery Â≠òÂÇ®Â≠êselect
    private List<Object> list = new ArrayList<Object>();//ÂÜÖ‰∏ÄÂ±?
    private List<Object> alist = new ArrayList<Object>();//Â≠êÂÜÖ‰∏?Â±?
    private List<Object> templist = new ArrayList<Object>();
    ArrayList<Object> atemplist = new ArrayList<Object>();

    public static void main(String[] args) throws Exception {

//        InputStream input = System.in;
//        InputStream input1;
//        input1 = input;
//        BufferedReader br = new BufferedReader(new InputStreamReader(input));
//        String str;
//        str = br.readLine();
        System.out.println("INPUT THE SQL SENTENCE");
        System.out.println("-----------------------------------------------------------");

//        SqlParser parser = new SqlParser(input);
//        parser.parse();
//        System.out.println("sql is correct!");

        while(true)
        {

            SqlParser parser = new SqlParser(System.in);
            Object result=parser.parse();
            System.out.println("result: "+result);
            System.out.println("sql is correct!");
            System.out.println();
            System.out.println("-----------------------------------------------------------");
            System.out.println();
            System.out.println();


        }


    }

  final public Object parse() throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
    Object result=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      //***************1	CREATE ************************************************
          //1.1.1	CREATE DATABASE testdbÔº?
          //1.1.1	CREATE TABLE table_name	();
          t = jj_consume_token(CREATE);
                    result=create(t);
      break;
    case DROP:
      t = jj_consume_token(DROP);
                   result=drop(t);
      break;
    case RENAME:
      t = jj_consume_token(RENAME);
                     result=rename(t);
      break;
    case USE:
      t = jj_consume_token(USE);
                  result=use(t);
      break;
    case SHOW:
      t = jj_consume_token(SHOW);
                   result=show(t);
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
                   result=select(t);
      break;
    case ALTER:
      t = jj_consume_token(ALTER);
                     result=alter(t);
      break;
    case INSERT:
      //only support simple insert statement
          t = jj_consume_token(INSERT);
                     result=insert(t);
      break;
    case UPDATE:
      t = jj_consume_token(UPDATE);
                     result=update(t);
      break;
    case DELETE:
      t = jj_consume_token(DELETE);
                     result=delete(t);
      break;
    case TRUNCATE:
      t = jj_consume_token(TRUNCATE);
                       result=truncate(t);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Object select(Token d) throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
    t=d;

    System.out.println("------SELECT METHOD --------");
    saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case ASTERISK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        t = jj_consume_token(ALL);
                       saveTokenInSQL(t);
        break;
      case ASTERISK:
        t = jj_consume_token(ASTERISK);
                         saveTokenInSQL(t);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(FROM);
                     saveTokenInSQL(t);
      fromTables();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CROSS:
        case FULL:
        case INNER:
        case JOIN:
        case LEFT:
        case RIGHT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        Join();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        where();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP_BY:
        groupBy();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER_BY:
        orderBy();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
    case COUNT:
    case DISTINCT:
    case MAX:
    case MIN:
    case SUM:
    case YEAR:
    case WEEK:
    case DATEDIFF:
    case DATE_FORMAT:
    case FLOOR:
    case DAY:
    case MONTH:
    case LBRACKET:
    case ID:
    case NAME:
      selectResultList();
      t = jj_consume_token(FROM);
                     saveTokenInSQL(t);
      fromTables();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CROSS:
        case FULL:
        case INNER:
        case JOIN:
        case LEFT:
        case RIGHT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        Join();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        where();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP_BY:
        groupBy();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER_BY:
        orderBy();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         Object a = ExecuteStatement.select(sql);
//         String a = "test";
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void subquerySelect(Token d) throws ParseException {
    subquerySql = new ArrayList<Object>();
    Token t;
    t = d;
    saveTokenInList(t,subquerySql);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case ASTERISK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        t = jj_consume_token(ALL);
                             saveTokenInList(t,subquerySql);
        break;
      case ASTERISK:
        t = jj_consume_token(ASTERISK);
                             saveTokenInList(t,subquerySql);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DISTINCT:
    case ID:
    case NAME:
      subquerySelectResultList();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(FROM);
                     saveTokenInList(t,subquerySql);
    subqueryFromTables();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CROSS:
      case FULL:
      case INNER:
      case LEFT:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
      subqueryJoin();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      subqueryWhere();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP_BY:
      subqueryGroupBy();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER_BY:
      subqueryOrderBy();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

//ÊääTokenÂ≠òÂà∞sqlÈá?
  final public void saveTokenInSQL(Token a) throws ParseException {
    Token t;
        t = a;
        System.out.println(t.image+" : "+t.kind);
        sql.add(t);
  }

//ÊäälistÂ≠òÂà∞sqlÈá?
  final public void saveListInSQL(List<Object> a) throws ParseException {
        sql.add(a);
  }

//ÊääTokenÂ≠òÂà∞listÈá?
  final public void saveTokenInList(Token a,List<Object> l) throws ParseException {
    Token t;
        t = a;
        System.out.println("------->"+t.image+" : "+t.kind);
        l.add(t);
  }

//ÊääTempListÂ≠òÂà∞listÈá?
  final public void saveTempListInList(List<Object> temp,List<Object> l) throws ParseException {
        //System.out.print("  list is : ");
//        for (Object object : temp)
//        {
//            System.out.println(object);
//        }
//        System.out.println("");

        l.add(temp);
  }

  final public void showStructure() throws ParseException {
        System.out.println();
        System.out.println("----------STRUCTURE----------");
        for (Object object : sql)
        {
            System.out.println(object);
        }
  }

  final public Object insert(Token d) throws ParseException {
    Token t;

    sql = new ArrayList<Object>();
    list = new ArrayList<Object>();
    int i = 0;
        t=d;
        System.out.println("------INSERT METHOD --------");
        saveTokenInSQL(t);
    //2.1.1	INSERT INTO table1 (column1, coulumn2,‚Ä?) VALUES (value1, value2 , ‚Ä?);//value = number or text;
                t = jj_consume_token(INTO);
                saveTokenInSQL(t);
    t = jj_consume_token(ID);
                 saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        t = jj_consume_token(NAME);
                               saveTokenInList(t,list);i++;
        break;
      case ID:
        t = jj_consume_token(ID);
                                                                     saveTokenInList(t,list);i++;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          t = jj_consume_token(NAME);
                                   saveTokenInList(t,list);i++;
          break;
        case ID:
          t = jj_consume_token(ID);
                                                                         saveTokenInList(t,list);i++;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
             saveTempListInList(list,sql);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUES:
      t = jj_consume_token(VALUES);
                  saveTokenInSQL(t);
      multivalues(i);
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
      subquerySelect(t);
                   saveTempListInList(subquerySql,sql);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        showStructure();
   Object a = ExecuteStatement.insert(sql);
//   String a = "test";
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Object create(Token d) throws ParseException {
    Token t;

    sql = new ArrayList<Object>();
        t=d;
        System.out.println("------CREATE METHOD --------");
        saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      ////1.1.1	CREATE DATABASE testdbÔº?
                  t = jj_consume_token(DATABASE);
                saveTokenInSQL(t);
      t = jj_consume_token(ID);
                saveTokenInSQL(t);
      break;
    case TABLE:
      t = jj_consume_token(TABLE);
                saveTokenInSQL(t);
      t = jj_consume_token(ID);
                 saveTokenInSQL(t);
      createTable();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     System.out.println("------ test interface position --------");
    Object a = ExecuteStatement.create(sql);// %%
//    String a = "test";
    System.out.println("result: ----------"+a);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

////1.1.1	CREATE TABLE table_name
//  //( 	column_name_1 data_type default value column_constraint,
//  //column_name_2 data_type default value column_constraint,
//  //...,
//  //table_constraint	 );
  final public void createTable() throws ParseException {
 Token t;
    jj_consume_token(LBRACKET);
    createLine();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        createLine();
        break;
      default:
        jj_la1[29] = jj_gen;
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INDEX:
          case PRIMARY_KEY:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_6;
          }
          table_constration();
        }
      }
    }
    jj_consume_token(RBRACKET);
     saveTempListInList(list,sql);
  }

  final public void createLine() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    t = jj_consume_token(ID);
                   saveTokenInList(t,templist);
    dataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
    case INCREMENT:
    case AUTO_INCREMENT:
    case PRIMARY_KEY:
    case NOT_NULL:
      columnConstration();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
     saveTempListInList(templist,list);
  }

  final public void createLine1(Token d) throws ParseException {
    Token t;
    t = d;
    templist = new ArrayList<Object>();
    saveTokenInList(t,templist);
    t = jj_consume_token(ID);
                   saveTokenInList(t,templist);
    dataType();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
    case INCREMENT:
    case AUTO_INCREMENT:
    case PRIMARY_KEY:
    case NOT_NULL:
      columnConstration();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AFTER:
      t = jj_consume_token(AFTER);
                                 saveTokenInList(t,templist);
      t = jj_consume_token(ID);
                                 saveTokenInList(t,templist);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
     saveTempListInList(templist,list);
  }

  final public void dataType() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case VARCHAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARCHAR:
        t = jj_consume_token(VARCHAR);
                       saveTokenInList(t,templist);
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
                                                                 saveTokenInList(t,templist);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        t = jj_consume_token(LBRACKET);
        t = jj_consume_token(NUMBER);
                                 saveTokenInList(t,templist);
        t = jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      break;
    case BLOB:
      t = jj_consume_token(BLOB);
                     saveTokenInList(t,templist);
      break;
    case INT:
    case BIGINT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
                 saveTokenInList(t,templist);
        break;
      case BIGINT:
        t = jj_consume_token(BIGINT);
                                                            saveTokenInList(t,templist);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        t = jj_consume_token(LBRACKET);
        t = jj_consume_token(NUMBER);
                             saveTokenInList(t,templist);
        t = jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      break;
    case REAL:
      t = jj_consume_token(REAL);
                     saveTokenInList(t,templist);
      break;
    case DECIMAL:
    case DOUBLE:
    case FLOAT:
    case NUMERIC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                     saveTokenInList(t,templist);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
                                                                   saveTokenInList(t,templist);
        break;
      case DECIMAL:
        t = jj_consume_token(DECIMAL);
                           saveTokenInList(t,templist);
        break;
      case NUMERIC:
        t = jj_consume_token(NUMERIC);
                                                                       saveTokenInList(t,templist);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        t = jj_consume_token(LBRACKET);
        t = jj_consume_token(NUMBER);
                                 saveTokenInList(t,templist);
        t = jj_consume_token(COMMA);
        t = jj_consume_token(NUMBER);
                                 saveTokenInList(t,templist);
        t = jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      break;
    case DATE:
      t = jj_consume_token(DATE);
                         saveTokenInList(t,templist);
      break;
    case TIMESTAMP:
      t = jj_consume_token(TIMESTAMP);
                         saveTokenInList(t,templist);
      break;
    case TIME:
      t = jj_consume_token(TIME);
                         saveTokenInList(t,templist);
      break;
    case YEAR:
      t = jj_consume_token(YEAR);
                         saveTokenInList(t,templist);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void columnConstration() throws ParseException {
 Token t;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT_NULL:
        t = jj_consume_token(NOT_NULL);
                    saveTokenInList(t,templist);
        break;
      case PRIMARY_KEY:
        t = jj_consume_token(PRIMARY_KEY);
                       saveTokenInList(t,templist);
        break;
      case AUTO_INCREMENT:
        t = jj_consume_token(AUTO_INCREMENT);
                          saveTokenInList(t,templist);
        break;
      case INCREMENT:
        t = jj_consume_token(INCREMENT);
                     saveTokenInList(t,templist);
        break;
      case COMMENT:
        t = jj_consume_token(COMMENT);
                      saveTokenInList(t,templist);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          t = jj_consume_token(TEXT);
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                               saveTokenInList(t,templist);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
      case INCREMENT:
      case AUTO_INCREMENT:
      case PRIMARY_KEY:
      case NOT_NULL:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_7;
      }
    }
  }

  final public void table_constration() throws ParseException {
 Token t;
templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INDEX:
      t = jj_consume_token(INDEX);
                     saveTokenInList(t,templist);
      break;
    case PRIMARY_KEY:
      t = jj_consume_token(PRIMARY_KEY);
                        saveTokenInList(t,templist);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t = jj_consume_token(ID);
          break;
        case NAME:
          t = jj_consume_token(NAME);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                     saveTokenInList(t,templist);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            t = jj_consume_token(ID);
            break;
          case NAME:
            t = jj_consume_token(NAME);
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                              saveTokenInList(t,templist);
        }
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
     saveTempListInList(templist,list);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Object delete(Token d) throws ParseException {
    Token t;

    sql = new ArrayList<Object>();
        t=d;
        System.out.println("------DELETE METHOD --------");
        saveTokenInSQL(t);
    t = jj_consume_token(FROM);
        saveTokenInSQL(t);
    t = jj_consume_token(ID);
         saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where();
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP_BY:
      groupBy();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER_BY:
      orderBy();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        Object a = ExecuteStatement.delete(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Object truncate(Token d) throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
        t=d;
        System.out.println("------TRUNCATE METHOD --------");
        saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        saveTokenInSQL(t);
    showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        Object a = ExecuteStatement.truncate(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//2.1.1	DROP DATABSE databse_name;
  final public Object drop(Token d) throws ParseException {
     Token t;
     sql = new ArrayList<Object>();
     t=d;
     System.out.println("------DROP METHOD --------");
     saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASE:
      t = jj_consume_token(DATABASE);
                        saveTokenInSQL(t);
      t = jj_consume_token(ID);
                      saveTokenInSQL(t);
      break;
    case TABLE:
      t = jj_consume_token(TABLE);
                     saveTokenInSQL(t);
      name();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        name();
      }
             list =templist;
             saveTempListInList(list,sql);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATEMENT_END:
        jj_consume_token(STATEMENT_END);
        break;
      case END:
        jj_consume_token(END);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      showStructure();
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     System.out.println("------&&&&&&&&&&&&&&&&7--------");
        Object a = ExecuteStatement.drop(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//3.1.1	RENAME DATABSE old_name TO new_name
  final public Object rename(Token d) throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
         t=d;
         System.out.println("------RENAME METHOD --------");
         saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TABLE:
    case DATABASE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATABASE:
        t = jj_consume_token(DATABASE);
                    saveTokenInSQL(t);
        break;
      case TABLE:
        t = jj_consume_token(TABLE);
                                                    saveTokenInSQL(t);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    t = jj_consume_token(ID);
                     saveTokenInSQL(t);
    t = jj_consume_token(TO);
                     saveTokenInSQL(t);
    t = jj_consume_token(ID);
                     saveTokenInSQL(t);
        showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        Object a = ExecuteStatement.rename(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//5.1.1	SHOW DATABASE;SHOW TABLES;
  final public Object show(Token d) throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
         t=d;
         System.out.println("------SHWO METHOD --------");
         saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATABASES:
      t = jj_consume_token(DATABASES);
      break;
    case TABLES:
      t = jj_consume_token(TABLES);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                   saveTokenInSQL(t);
        showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        Object a = ExecuteStatement.show(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//4.1.1	USE database_name
  final public Object use(Token d) throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
         t=d;
         System.out.println("------USE METHOD --------");
         saveTokenInSQL(t);
    t = jj_consume_token(ID);
                 saveTokenInSQL(t);
        showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        Object a = ExecuteStatement.use(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//3	UPDATE
  //3.1	UPDATE table SET column1 = value1, column2 = value2 WHERE condition;
  //3.2	UPDATE table SET column1 =	(SELECT a From b WHERE c = ‚Äúe‚Ä?);
  //3.3	UPDATE table INNER JOIN table1 ON table.column1 = table2.column1 SET table.column2 = table1.coulmn2,‚Ä? (WHERE);
  final public Object update(Token d) throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
         t=d;
         System.out.println("------UPDATE METHOD --------");
         saveTokenInSQL(t);
    t = jj_consume_token(ID);
                     saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CROSS:
    case FULL:
    case INNER:
    case JOIN:
    case LEFT:
    case RIGHT:
      Join();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    t = jj_consume_token(SET);
                      saveTokenInSQL(t);
    sets();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where();
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
        showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        Object a = ExecuteStatement.update(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Object alter(Token d) throws ParseException {
    Token t;
    sql = new ArrayList<Object>();
         t=d;
         System.out.println("------ALTER METHOD --------");
         saveTokenInSQL(t);
    t = jj_consume_token(TABLE);
                                 saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                       saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      t = jj_consume_token(ADD);
      createLine1(t);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(ADD);
        createLine1(t);
      }
             saveTempListInList(list,sql);
      break;
    case MODIFY:
      t = jj_consume_token(MODIFY);
                                      saveTokenInSQL(t);
      createLine();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(MODIFY);
        createLine();
      }
         saveTempListInList(list,sql);
      break;
    case DROP:
      t = jj_consume_token(DROP);
      dropColumn(t);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        t = jj_consume_token(DROP);
        dropColumn(t);
      }
          saveTempListInList(list,sql);
      break;
    case RENAME:
      t = jj_consume_token(RENAME);
                      saveTokenInSQL(t);
      t = jj_consume_token(ID);
                             saveTokenInSQL(t);
      t = jj_consume_token(TO);
                             saveTokenInSQL(t);
      t = jj_consume_token(ID);
                             saveTokenInSQL(t);
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        showStructure();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATEMENT_END:
      jj_consume_token(STATEMENT_END);
      break;
    case END:
      jj_consume_token(END);
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        Object a = ExecuteStatement.alter(sql);
//        String a = "test";
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public void dropColumn(Token d) throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
            t=d;
            saveTokenInList(t,templist);
    t = jj_consume_token(COLUMN);
                      saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                     saveTokenInList(t,templist);
        saveTempListInList(templist,list);
  }

  final public void add() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
                                     saveTokenInSQL(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case DECIMAL:
      case DOUBLE:
      case FLOAT:
      case INT:
      case NUMERIC:
      case REAL:
      case VARCHAR:
      case YEAR:
      case BLOB:
      case DATE:
      case TIME:
      case TIMESTAMP:
      case BIGINT:
        dataType();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
      case INCREMENT:
      case AUTO_INCREMENT:
      case PRIMARY_KEY:
      case NOT_NULL:
        columnConstration();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AFTER:
        t = jj_consume_token(AFTER);
                                         saveTokenInSQL(t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          t = jj_consume_token(NAME);
          break;
        case ID:
          t = jj_consume_token(ID);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                           saveTokenInSQL(t);
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Join() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CROSS:
    case FULL:
    case INNER:
    case LEFT:
    case RIGHT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INNER:
        t = jj_consume_token(INNER);
                  saveTokenInSQL(t);
        break;
      case LEFT:
        t = jj_consume_token(LEFT);
                   saveTokenInSQL(t);
        break;
      case FULL:
        t = jj_consume_token(FULL);
                    saveTokenInSQL(t);
        break;
      case CROSS:
        t = jj_consume_token(CROSS);
                    saveTokenInSQL(t);
        break;
      case RIGHT:
        t = jj_consume_token(RIGHT);
                    saveTokenInSQL(t);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    t = jj_consume_token(JOIN);
                                 saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        t = jj_consume_token(NAME);
                      saveTokenInSQL(t);
        break;
      case ID:
        t = jj_consume_token(ID);
                        saveTokenInSQL(t);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      t = jj_consume_token(SELECT);
                         System.out.println("SUB-SELECT!!");
      subquerySelect(t);
                         saveListInSQL(subquerySql);
      jj_consume_token(RBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        t = jj_consume_token(AS);
                         saveTokenInSQL(t);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          t = jj_consume_token(NAME);
                               saveTokenInSQL(t);
          break;
        case ID:
          t = jj_consume_token(ID);
                                saveTokenInSQL(t);
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(ON);
                                 saveTokenInSQL(t);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 saveTokenInList(t,templist);
    t = jj_consume_token(EQ);
                                 saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 saveTokenInList(t,templist);
     saveTempListInList(templist,sql);
  }

  final public void subqueryJoin() throws ParseException {
    Token t;
    atemplist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INNER:
      t = jj_consume_token(INNER);
      break;
    case LEFT:
      t = jj_consume_token(LEFT);
      break;
    case FULL:
      t = jj_consume_token(FULL);
      break;
    case CROSS:
      t = jj_consume_token(CROSS);
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                     saveTokenInList(t,subquerySql);
    t = jj_consume_token(JOIN);
                                 saveTokenInList(t,subquerySql);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 saveTokenInList(t,subquerySql);
    t = jj_consume_token(ON);
                                 saveTokenInList(t,subquerySql);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 saveTokenInList(t,atemplist);
    t = jj_consume_token(EQ);
                                 saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                 saveTokenInList(t,atemplist);
     saveTempListInList(atemplist,subquerySql);
  }

//whereËØ≠Âè•
  final public void where() throws ParseException {
 Token t;
    t = jj_consume_token(WHERE);
        saveTokenInSQL(t);
    multiCondition();
  }

  final public void subqueryWhere() throws ParseException {
 Token t;
    t = jj_consume_token(WHERE);
     saveTokenInList(t,subquerySql);
    subqueryMultiCondition();
  }

// Â§öÊù°‰ª∂Âπ∂ÂàóÁöÑÊó∂Â??
  final public void multiCondition() throws ParseException {
    Token t;
    int i = 0;// i = 0 Ë°®Á§∫Âè™Êúâ‰∏?‰∏™conditionÔº?=1 Ë°®Á§∫ÊúâÂ§ö‰∏™condition
    list = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case YEAR:
    case WEEK:
    case FLOOR:
    case DAY:
    case MONTH:
    case ID:
    case NAME:
    case TEXT:
      condition();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      condition();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
                         saveTokenInList(t,list); i = 1;
        break;
      case OR:
        t = jj_consume_token(OR);
                         saveTokenInList(t,list); i = 1;
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVG:
      case COUNT:
      case MAX:
      case MIN:
      case SUM:
      case YEAR:
      case WEEK:
      case FLOOR:
      case DAY:
      case MONTH:
      case ID:
      case NAME:
      case TEXT:
        condition();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        condition();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
//        if( i == 0)
//        {
//         //  list = templist;
           saveListInSQL(list);
//           System.out.println("Only one condition");
//        }
//        else
//        {
//           saveListInSQL(list);
//        }

  }

  final public void subqueryMultiCondition() throws ParseException {
    Token t;
    int i = 0;// i = 0 Ë°®Á§∫Âè™Êúâ‰∏?‰∏™conditionÔº?=1 Ë°®Á§∫ÊúâÂ§ö‰∏™condition
    alist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case NAME:
    case TEXT:
      subqueryCondition();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      subqueryCondition();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        t = jj_consume_token(AND);
                         saveTokenInList(t,alist); i = 1;
        break;
      case OR:
        t = jj_consume_token(OR);
                         saveTokenInList(t,alist); i = 1;
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case NAME:
      case TEXT:
        subqueryCondition();
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        subqueryCondition();
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        if( i == 0)
        {
           alist = atemplist;
           {saveTempListInList(alist,subquerySql);}
           System.out.println("Only one condition");
        }
        else
        {
           {saveTempListInList(alist,subquerySql);}
        }
  }

//Â∞èÊÉÖÂÜµÔºõÂ∞èÊù°‰ª?
  final public void condition() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
                 saveTokenInList(t,templist);
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case LQ:
    case RQ:
    case NE:
      simpleCondition();
      break;
    case BETWEEN:
      betweenCondition();
      break;
    case IN:
      in();
      break;
    case LIKE:
      like();
      break;
    case IS:
      is();
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Â∞èÊÉÖÂÜµÔºõÂ∞èÊù°‰ª?
  final public void subqueryCondition() throws ParseException {
    Token t;
    atemplist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case TEXT:
      t = jj_consume_token(TEXT);
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                         saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      t = jj_consume_token(AS);
                                            saveTokenInList(t,atemplist);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        t = jj_consume_token(NAME);
        break;
      case ID:
        t = jj_consume_token(ID);
        break;
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                            saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
                 saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case LQ:
    case RQ:
    case NE:
      subquerysimpleCondition();
      break;
    case BETWEEN:
      subqueryBetweenCondition();
      break;
    case IN:
      subqueryin();
      break;
    case LIKE:
      subquerylike();
      break;
    case IS:
      subqueryis();
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Between ...  AND ... Êù°‰ª∂ËØ≠Âè•
  final public void betweenCondition() throws ParseException {
 Token t;
    t = jj_consume_token(BETWEEN);
                     saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      t = jj_consume_token(TEXT);
                                saveTokenInList(t,templist);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                                saveTokenInList(t,templist);
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(AND);
                 saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      t = jj_consume_token(TEXT);
                                saveTokenInList(t,templist);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                                saveTokenInList(t,templist);
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     saveTempListInList(templist,list);
  }

  final public void subqueryBetweenCondition() throws ParseException {
 Token t;
    t = jj_consume_token(BETWEEN);
                     saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      t = jj_consume_token(TEXT);
                                saveTokenInList(t,atemplist);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                                saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(AND);
                 saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      t = jj_consume_token(TEXT);
                                saveTokenInList(t,atemplist);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                                saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    saveTempListInList(atemplist,alist);
  }

  final public void like() throws ParseException {
  Token t;
    t = jj_consume_token(LIKE);
                       saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIKETEXT:
      t = jj_consume_token(LIKETEXT);
      break;
    case LIKETEXT2:
      t = jj_consume_token(LIKETEXT2);
      break;
    case TEXT:
      t = jj_consume_token(TEXT);
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                    saveTokenInList(t,templist);
  saveTempListInList(templist,list);
  }

  final public void subquerylike() throws ParseException {
  Token t;
    t = jj_consume_token(LIKE);
                       saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIKETEXT:
      t = jj_consume_token(LIKETEXT);
      break;
    case LIKETEXT2:
      t = jj_consume_token(LIKETEXT2);
      break;
    case TEXT:
      t = jj_consume_token(TEXT);
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                     saveTokenInList(t,atemplist);
  saveTempListInList(atemplist,alist);
  }

  final public void is() throws ParseException {
  Token t;
    t = jj_consume_token(IS);
                    saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_NULL:
      t = jj_consume_token(NOT_NULL);
                           saveTokenInList(t,templist);
      break;
    case NULL:
      t = jj_consume_token(NULL);
                           saveTokenInList(t,templist);
      break;
    default:
      jj_la1[111] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    saveTempListInList(templist,list);
  }

  final public void subqueryis() throws ParseException {
  Token t;
    t = jj_consume_token(IS);
                    saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_NULL:
      t = jj_consume_token(NOT_NULL);
                           saveTokenInList(t,atemplist);
      break;
    case NULL:
      t = jj_consume_token(NULL);
                           saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     saveTempListInList(atemplist,alist);
  }

  final public void in() throws ParseException {
    Token t;
    // Êñ∞Âª∫‰∏?‰∏™‰∏¥Êó∂ÁöÑtemplist1Â≠òÊîæÂ∞èÊã¨Âè∑ÂÜÖÂÆπÔºàÔº?    --->templist1
    // a in Ôºàtempliste1Ôº?    --->condition ----> templist
    //conditionÂ≠òÊîæÂú®templist‰∏? conditon
    //Âè™Êúâ‰∏?‰∏™conditionÁöÑÊó∂ÂÄ? list = templist
    //muticondition ---> list ÊîæÂú®sql‰∏?
    List<Object>templist1 = new ArrayList<Object>();
    t = jj_consume_token(IN);
        //templist.add(t);
        saveTokenInList(t,templist);
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
    case TEXT:
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEXT:
          t = jj_consume_token(TEXT);
                                      saveTokenInList(t,templist1);
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
                                        saveTokenInList(t,templist1);
          break;
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[114] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case TEXT:
          ;
          break;
        default:
          jj_la1[115] = jj_gen;
          break label_15;
        }
      }
      break;
    case SELECT:
      t = jj_consume_token(SELECT);
             System.out.println("SUB-SELECT!!");
      subquerySelect(t);
//           saveListInSQL(list);
            saveTempListInList(subquerySql,templist1);
//            saveTempListInList(templist1,templist);
//            saveTempListInList(templist,list);

      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
            //templist.add(t);
         saveTempListInList(templist1,templist);
         saveTempListInList(templist,list);
  }

  final public void subqueryin() throws ParseException {
    Token t;
    // Êñ∞Âª∫‰∏?‰∏™‰∏¥Êó∂ÁöÑtemplist1Â≠òÊîæÂ∞èÊã¨Âè∑ÂÜÖÂÆπÔºàÔº?    --->templist1
    // a in Ôºàtempliste1Ôº?    --->condition ----> templist
    //conditionÂ≠òÊîæÂú®templist‰∏? conditon
    //Âè™Êúâ‰∏?‰∏™conditionÁöÑÊó∂ÂÄ? list = templist
    //muticondition ---> list ÊîæÂú®sql‰∏?
    List<Object>templist2 = new ArrayList<Object>();
    t = jj_consume_token(IN);
        //templist.add(t);
        saveTokenInList(t,atemplist);
    jj_consume_token(LBRACKET);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEXT:
        t = jj_consume_token(TEXT);
                                      saveTokenInList(t,templist2);
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
                                        saveTokenInList(t,templist2);
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[118] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case TEXT:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_16;
      }
    }
    jj_consume_token(RBRACKET);
            //templist.add(t);
         saveTempListInList(templist2,atemplist);
         saveTempListInList(atemplist,list);
  }

// Áî®‰∫é
  final public void name() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case YEAR:
    case WEEK:
    case FLOOR:
    case DAY:
    case MONTH:
      singlefunction();
      break;
    case ID:
    case NAME:
    case TEXT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      case TEXT:
        t = jj_consume_token(TEXT);
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                     saveTokenInList(t,templist);
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      t = jj_consume_token(AS);
               saveTokenInList(t,templist);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        t = jj_consume_token(NAME);
        break;
      case ID:
        t = jj_consume_token(ID);
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                           saveTokenInList(t,templist);
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
  }

//ÁÆ?ÂçïÊù°‰ª?
  final public void simpleCondition() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
                        saveTokenInList(t,templist);
      break;
    case GT:
      t = jj_consume_token(GT);
                                                                              saveTokenInList(t,templist);
      break;
    case LT:
      t = jj_consume_token(LT);
                        saveTokenInList(t,templist);
      break;
    case NE:
      t = jj_consume_token(NE);
                                                                              saveTokenInList(t,templist);
      break;
    case LQ:
      t = jj_consume_token(LQ);
                        saveTokenInList(t,templist);
      break;
    case RQ:
      t = jj_consume_token(RQ);
                                                                              saveTokenInList(t,templist);
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rightCondition();
  }

  final public void subquerysimpleCondition() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
                        saveTokenInList(t,atemplist);
      break;
    case GT:
      t = jj_consume_token(GT);
                                                                               saveTokenInList(t,atemplist);
      break;
    case LT:
      t = jj_consume_token(LT);
                        saveTokenInList(t,atemplist);
      break;
    case NE:
      t = jj_consume_token(NE);
                                                                               saveTokenInList(t,atemplist);
      break;
    case LQ:
      t = jj_consume_token(LQ);
                        saveTokenInList(t,atemplist);
      break;
    case RQ:
      t = jj_consume_token(RQ);
                                                                               saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    subqueryrightCondition();
  }

  final public void rightCondition() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      // ‚Ä?/‚Ä? ÔºåÊï∞Â≠óÔºåÂäüËÉΩ
            t = jj_consume_token(TEXT);
              saveTokenInList(t,templist);
              saveTempListInList(templist,list);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
               saveTokenInList(t,templist);
               saveTempListInList(templist,list);
      break;
    case NAME:
      t = jj_consume_token(NAME);
               saveTokenInList(t,templist);
               saveTempListInList(templist,list);
      break;
    case TIMEORDATE:
      t = jj_consume_token(TIMEORDATE);
                saveTokenInList(t,templist);
                saveTempListInList(templist,list);
      break;
    case ID:
      function();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      t = jj_consume_token(SELECT);
      subquerySelect(t);
//              saveTempListInList(subquerySql,sql);
                saveTempListInList(subquerySql,list);
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void subqueryrightCondition() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      // ‚Ä?/‚Ä? ÔºåÊï∞Â≠óÔºåÂäüËÉΩ
            t = jj_consume_token(TEXT);
              saveTokenInList(t,atemplist);
              saveTempListInList(atemplist,alist);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
               saveTokenInList(t,atemplist);
               saveTempListInList(atemplist,alist);
      break;
    case NAME:
      t = jj_consume_token(NAME);
               saveTokenInList(t,atemplist);
               saveTempListInList(atemplist,alist);
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//ÂäüËÉΩÊñπÊ≥ï
  final public void function() throws ParseException {
 Token t;
    //  id (ÔºàÂ§öÔºâÂèÇÊï? )
         t = jj_consume_token(ID);
        saveTokenInList(t,templist);
        saveTempListInList(templist,list);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      arguments();
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
  }

//ÔºàÂ§öÔºâÂèÇÊï∞ÂáΩÊï?
  final public void arguments() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      argument();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[129] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        argument();
      }
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
  }

// ‰∏?ÁªÑÂèÇÊï?
  final public void argument() throws ParseException {
 Token t;
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void selectResultList() throws ParseException {
    Token t;
    //list = new ArrayList<Object>();
    list = new ArrayList<Object>();
    selectResult();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      selectResult();
    }
     saveTempListInList(list,sql);
  }

  final public void subquerySelectResultList() throws ParseException {
    Token t;
    alist = new ArrayList<Object>();
    subquerySelectResult();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      subquerySelectResult();
    }
     saveTempListInList(alist,subquerySql);
  }

  final public void selectResult() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
                         saveTokenInList(t,templist);
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATEDIFF:
    case DATE_FORMAT:
      doublefunction();
      break;
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case YEAR:
    case WEEK:
    case FLOOR:
    case DAY:
    case MONTH:
      singlefunction();
      break;
    case LBRACKET:
    case ID:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                     saveTokenInList(t,templist);
        break;
      case NAME:
        t = jj_consume_token(NAME);
                        saveTokenInList(t,templist);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        t = jj_consume_token(SELECT);
                     System.out.println("SUB-SELECT!!");
        subquerySelect(t);
                      saveTempListInList(subquerySql,templist);
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[136] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      t = jj_consume_token(AS);
                 saveTokenInList(t,templist);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                saveTokenInList(t,templist);
      break;
    default:
      jj_la1[138] = jj_gen;
      ;
    }
     saveTempListInList(templist,list);
  }

  final public void subquerySelectResult() throws ParseException {
    Token t;
    ArrayList<Object> atemplist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      t = jj_consume_token(DISTINCT);
                         saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[139] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                          saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      t = jj_consume_token(AS);
                 saveTokenInList(t,atemplist);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                saveTokenInList(t,atemplist);
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
     saveTempListInList(atemplist,alist);
  }

  final public void subqueryFromTables() throws ParseException {
    Token t;
    alist = new ArrayList<Object>();
    subqueryTable();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[143] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      subqueryTable();
    }
  saveTempListInList(alist,subquerySql);
  }

  final public void fromTables() throws ParseException {
    Token t;
    list = new ArrayList<Object>();
    table();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[144] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      table();
    }
  saveTempListInList(list,sql);
  }

  final public void table() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
                    saveTokenInList(t,templist);
      break;
    case ID:
      t = jj_consume_token(ID);
                  saveTokenInList(t,templist);
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      t = jj_consume_token(AS);
               saveTokenInList(t,templist);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        t = jj_consume_token(NAME);
        break;
      case ID:
        t = jj_consume_token(ID);
        break;
      default:
        jj_la1[146] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                 saveTokenInList(t,templist);
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
  saveTempListInList(templist,list);
  }

  final public void subqueryTable() throws ParseException {
    Token t;
    ArrayList<Object> atemplist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case ID:
      t = jj_consume_token(ID);
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                          saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case ID:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case NAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          t = jj_consume_token(NAME);
          break;
        case ID:
          t = jj_consume_token(ID);
          break;
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                         saveTokenInList(t,atemplist);
        break;
      case AS:
        t = jj_consume_token(AS);
                 saveTokenInList(t,atemplist);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          t = jj_consume_token(NAME);
          break;
        case ID:
          t = jj_consume_token(ID);
          break;
        default:
          jj_la1[150] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                 saveTokenInList(t,atemplist);
        break;
      default:
        jj_la1[151] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[152] = jj_gen;
      ;
    }
  saveTempListInList(atemplist,alist);
  }

//void arguments() :
//{}
//{
// (
//    argument()
//    (
//        ","
//     argument()
//    )*
// )?
//}
  final public void multivalues(int a) throws ParseException {
 int i;
     i = a;
    values(i);
              saveTempListInList(list,sql);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      values(i);
                         saveTempListInList(list,sql);
    }
  }

  final public void values(int a) throws ParseException {
    list = new ArrayList<Object>();
    int i  = 0;
    int k =a;
    jj_consume_token(LBRACKET);
    value();
            saveTempListInList(templist,list); i++;
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[154] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      value();
                saveTempListInList(templist,list);i++;
    }
    jj_consume_token(RBRACKET);
        System.out.println("coulmn number\u951b\ufffd"+k);
        System.out.println("value number\u951b\ufffd"+i);
        if(k!=0 & k!=i)
        {
            jj_consume_token(COMMA);
            System.out.println("INSDERT GRAMMAR WRONG");
        }
  }

  final public void value() throws ParseException {
 Token t;
templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      t = jj_consume_token(TEXT);
               saveTokenInList(t,templist);
      break;
    case NUMBER:
      t = jj_consume_token(NUMBER);
                  saveTokenInList(t,templist);
      break;
    case TIMEORDATE:
      t = jj_consume_token(TIMEORDATE);
                       saveTokenInList(t,templist);
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void groupBy() throws ParseException {
 Token t;list = new ArrayList<Object>();
    t = jj_consume_token(GROUP_BY);
                                     saveTokenInSQL(t);
    groupsub();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[156] = jj_gen;
        break label_24;
      }
      jj_consume_token(COMMA);
      groupsub();
    }
         saveTempListInList(list,sql);
  }

  final public void subqueryGroupBy() throws ParseException {
 Token t;   alist = new ArrayList<Object>();
    t = jj_consume_token(GROUP_BY);
                                 saveTokenInList(t,subquerySql);
    subquerygroupsub();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[157] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMMA);
      subquerygroupsub();
    }
     saveTempListInList(alist,subquerySql);
  }

  final public void orderBy() throws ParseException {
    Token t;
    list = new ArrayList<Object>();
    t = jj_consume_token(ORDER_BY);
                        saveTokenInSQL(t);
    ordersub();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[158] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      ordersub();
    }
        saveTempListInList(list,sql);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      t = jj_consume_token(LIMIT);
                                            saveTokenInSQL(t);
      t = jj_consume_token(NUMBER);
                                            saveTokenInSQL(t);
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OFFSET:
      t = jj_consume_token(OFFSET);
                                           saveTokenInSQL(t);
      t = jj_consume_token(NUMBER);
                                             saveTokenInSQL(t);
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ROWS:
    case ROW:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROWS:
        t = jj_consume_token(ROWS);
        break;
      case ROW:
        t = jj_consume_token(ROW);
        break;
      default:
        jj_la1[161] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                     saveTokenInSQL(t);
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FETCH:
                            list = new ArrayList<Object>();
      t = jj_consume_token(FETCH);
                                           saveTokenInSQL(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEXT:
        t = jj_consume_token(NEXT);
        break;
      case FIRST:
        t = jj_consume_token(FIRST);
        break;
      default:
        jj_la1[163] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                          saveTokenInSQL(t);
      t = jj_consume_token(NUMBER);
                                           saveTokenInSQL(t);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROWS:
        t = jj_consume_token(ROWS);
        break;
      case ROW:
        t = jj_consume_token(ROW);
        break;
      default:
        jj_la1[164] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                      saveTokenInSQL(t);
      t = jj_consume_token(ONLY);
                                          saveTokenInSQL(t);
      break;
    default:
      jj_la1[165] = jj_gen;
      ;
    }
  }

  final public void subqueryOrderBy() throws ParseException {
    Token t;
    alist = new ArrayList<Object>();
    t = jj_consume_token(ORDER_BY);
                      saveTokenInList(t,subquerySql);
    subqueryordersub();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[166] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      subqueryordersub();
    }
         saveTempListInList(alist,subquerySql);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
      t = jj_consume_token(LIMIT);
                                            saveTokenInList(t,subquerySql);
      t = jj_consume_token(NUMBER);
                                            saveTokenInList(t,subquerySql);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OFFSET:
        t = jj_consume_token(OFFSET);
                                                saveTokenInList(t,subquerySql);
        t = jj_consume_token(NUMBER);
                                                  saveTokenInList(t,subquerySql);
        break;
      default:
        jj_la1[167] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROWS:
      case ROW:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROWS:
          t = jj_consume_token(ROWS);
          break;
        case ROW:
          t = jj_consume_token(ROW);
          break;
        default:
          jj_la1[168] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                          saveTokenInList(t,subquerySql);
        break;
      default:
        jj_la1[169] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FETCH:
        t = jj_consume_token(FETCH);
                                                saveTokenInList(t,subquerySql);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEXT:
          t = jj_consume_token(NEXT);
          break;
        case FIRST:
          t = jj_consume_token(FIRST);
          break;
        default:
          jj_la1[170] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                               saveTokenInList(t,subquerySql);
        t = jj_consume_token(NUMBER);
                                                saveTokenInList(t,subquerySql);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROWS:
          t = jj_consume_token(ROWS);
          break;
        case ROW:
          t = jj_consume_token(ROW);
          break;
        default:
          jj_la1[171] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                           saveTokenInList(t,subquerySql);
        t = jj_consume_token(ONLY);
                                               saveTokenInList(t,subquerySql);
        break;
      default:
        jj_la1[172] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[173] = jj_gen;
      ;
    }
  }

//void innerJoinMethod() :
//{   Token t;
//    list = new ArrayList<Object>();
//
//}
//{
//    t = <INNER>             {   saveTokenInSQL(t);   }
//    t = <JOIN>              {   saveTokenInSQL(t);   }
//    (t = <NAME>|t = <ID>)   {   saveTokenInSQL(t);   }
//    t = <ON>                {   saveTokenInSQL(t);   }
//    (t = <NAME>|t = <ID>)   {   saveTokenInSQL(t);   }
//    t = <EQ>                {   saveTokenInSQL(t);   }
//    (t = <NAME>|t = <ID>)   {   saveTokenInSQL(t);   }
//    //{saveTempListInList(list,sql);}
//
//}
  final public void ordersub() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[174] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                            saveTokenInList(t,templist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        t = jj_consume_token(ASC);
                   saveTokenInList(t,templist);
        break;
      case DESC:
        t = jj_consume_token(DESC);
                        saveTokenInList(t,templist);
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[176] = jj_gen;
      ;
    }
         saveTempListInList(templist,list);
  }

  final public void subqueryordersub() throws ParseException {
    Token t;
    atemplist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                            saveTokenInList(t,atemplist);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        t = jj_consume_token(ASC);
                   saveTokenInList(t,atemplist);
        break;
      case DESC:
        t = jj_consume_token(DESC);
                        saveTokenInList(t,atemplist);
        break;
      default:
        jj_la1[178] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
         saveTempListInList(atemplist,alist);
  }

  final public void groupsub() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                            saveTokenInList(t,templist);
     saveTempListInList(templist,list);
  }

  final public void subquerygroupsub() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[181] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     saveTokenInList(t,alist);
  }

  final public void sets() throws ParseException {
    Token t;
    int i = 0;// i = 0 Ë°®Á§∫Âè™Êúâ‰∏?‰∏™conditionÔº?=1 Ë°®Á§∫ÊúâÂ§ö‰∏™condition
    list = new ArrayList<Object>();
    set();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[182] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      set();
           i = 1;
    }
//         if( i == 0)
//         {
//            list = templist;
//            saveListInSQL(list);
//            System.out.println("Only one set");
//         }
//         else
//         {
            saveListInSQL(list);
//         }

  }

  final public void set() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[183] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                               saveTokenInList(t,templist);
    t = jj_consume_token(EQ);
                  saveTokenInList(t,templist);
    rightCondition();
  }

  final public void purefunction() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOW:
      t = jj_consume_token(NOW);
      break;
    case CURDATE:
      t = jj_consume_token(CURDATE);
      break;
    case SYSDATE:
      t = jj_consume_token(SYSDATE);
      break;
    default:
      jj_la1[184] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
     saveTokenInList(t,templist);
  }

  final public void singlefunction() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
      t = jj_consume_token(AVG);
      break;
    case COUNT:
      t = jj_consume_token(COUNT);
      break;
    case MAX:
      t = jj_consume_token(MAX);
      break;
    case MIN:
      t = jj_consume_token(MIN);
      break;
    case SUM:
      t = jj_consume_token(SUM);
      break;
    case FLOOR:
      t = jj_consume_token(FLOOR);
      break;
    case YEAR:
      t = jj_consume_token(YEAR);
      break;
    case MONTH:
      t = jj_consume_token(MONTH);
      break;
    case WEEK:
      t = jj_consume_token(WEEK);
      break;
    case DAY:
      t = jj_consume_token(DAY);
      break;
    default:
      jj_la1[185] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     saveTokenInList(t,templist);
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      default:
        jj_la1[186] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                   saveTokenInList(t,templist);
      break;
    case DATEDIFF:
    case DATE_FORMAT:
      doublefunction();
      break;
    default:
      jj_la1[187] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
  }

  final public void doublefunction() throws ParseException {
    Token t;
    templist = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATEDIFF:
      t = jj_consume_token(DATEDIFF);
      break;
    case DATE_FORMAT:
      t = jj_consume_token(DATE_FORMAT);
      break;
    default:
      jj_la1[188] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case YEAR:
    case WEEK:
    case FLOOR:
    case DAY:
    case MONTH:
      singlefunction();
      break;
    case NOW:
    case SYSDATE:
    case CURDATE:
      purefunction();
      break;
    case ID:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      default:
        jj_la1[189] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[190] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
    case YEAR:
    case WEEK:
    case FLOOR:
    case DAY:
    case MONTH:
      singlefunction();
      break;
    case NOW:
    case SYSDATE:
    case CURDATE:
      purefunction();
      break;
    case ID:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      default:
        jj_la1[191] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[192] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACKET);
     saveTokenInList(t,templist);
  }

  /** Generated Token Manager. */
  public SqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[193];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static private int[] jj_la1_11;
  static private int[] jj_la1_12;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
      jj_la1_init_9();
      jj_la1_init_10();
      jj_la1_init_11();
      jj_la1_init_12();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0x2000,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x10000,0x10000,0x1000000,0x0,0x10000,0x10000,0x0,0x0,0x4000000,0x0,0x0,0x80000,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x80000,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200000,0x0,0x400000,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x100000,0x0,0x100000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1020,0x0,0x40000000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x400,0x0,0x0,0x400,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000801,0x0,0x2000801,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x2000801,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x800000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x800000,0x0,0x0,0x40,0x40,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x10000,0x0,0x8802000,0x0,0x0,0x0,0x0,0x8802000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x8002000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8802000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x8002000,0x8002000,0x0,0x0,0x0,0x0,0x0,0x0,0x8002000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x10200400,0x0,0x0,0x0,0x0,0x10200400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x20000,0x20000,0x1,0x0,0x20000,0x20000,0x0,0x100,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x1,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x40e0,0x0,0x100,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x400,0x0,0x0,0x0,0x400,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x800,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x8040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0000000,0x18000000,0x0,0x0,0x0,0x0,0xf8000000,0x0,0xf8000000,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400007,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40010000,0x40010000,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x200400,0x0,0x40010000,0x40010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200400,0x40010000,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400004,0x0,0x0,0x400004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400007,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400004,0x0,0x3,0x3,0x0,0x400004,0x0,0x400004,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x40000,0x0,0x40000,};
   }
   private static void jj_la1_init_9() {
      jj_la1_9 = new int[] {0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x0,0x0,0x0,0x4,0x4,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_10() {
      jj_la1_10 = new int[] {0x0,0x20000,0x0,0x0,0x1,0x2,0x20000,0x0,0x0,0x1,0x2,0x10,0x0,0x20000,0x20000,0x0,0x0,0x1,0x2,0x0,0x100000,0x0,0x10,0x0,0x0,0x0,0x0,0x100000,0x4,0x0,0xc,0xc,0x0,0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x0,0xc,0xc,0x0,0x100000,0x0,0x10,0x4,0x0,0x1,0x2,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x10,0x0,0x0,0x10,0x0,0xfc0,0x0,0x0,0x0,0x0,0xfc0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x0,0x100000,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0xfc0,0xfc0,0x10,0x0,0x10,0x100000,0x0,0x0,0x100000,0x100000,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_11() {
      jj_la1_11 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x3000000,0x0,0x0,0x0,0x0,0x3000000,0x0,0x3000000,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x400,0x44000000,0x0,0x0,0x3000000,0x0,0x3000000,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x0,0x0,0x0,0x3000000,0x400,0x0,0x3000000,0x0,0x3000000,0x0,0x0,0x3000000,0x3000000,0x0,0x3000000,0x3000000,0x3000000,0x0,0x3000000,0x3000000,0x3000000,0x43000000,0x0,0x0,0x43000000,0x43000000,0x0,0x0,0x43000000,0x0,0x0,0x43000000,0x3000000,0x0,0x0,0x0,0x44000000,0x44000000,0x44000000,0x44000000,0x40000000,0x40000000,0x0,0x0,0x44000000,0x0,0x44000000,0x44000000,0x44000000,0x0,0x44000000,0x43000000,0x43000000,0x3000000,0x0,0x0,0x0,0xc7000000,0x46000000,0x0,0x0,0x1000000,0x24000000,0x0,0x0,0x0,0x3000000,0x3000000,0x3000000,0x0,0x0,0x3000000,0x3000000,0x0,0x0,0x0,0x3000000,0x3000000,0x0,0x3000000,0x3000000,0x3000000,0x3000000,0x3000000,0x0,0x0,0xc4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x0,0x0,0x3000000,0x0,0x0,0x3000000,0x3000000,0x0,0x3000000,0x0,0x0,0x3000000,0x3000000,0x0,0x3000000,0x3000000,0x3000000,0x3000000,};
   }
   private static void jj_la1_init_12() {
      jj_la1_12 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0xc,0x0,0xc,0x0,0x0,0x0,0xc,0x0,0xc,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public SqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SqlParser(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 193; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[388];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 193; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
          if ((jj_la1_11[i] & (1<<j)) != 0) {
            la1tokens[352+j] = true;
          }
          if ((jj_la1_12[i] & (1<<j)) != 0) {
            la1tokens[384+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 388; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
